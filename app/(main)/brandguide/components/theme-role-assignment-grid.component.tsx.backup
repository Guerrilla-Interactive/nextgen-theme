import React, { useEffect, useRef } from "react";
import { GridCol } from "@/features/unorganized-components/nextgen-core-ui";
import { Role, type OklchString } from "../brand-utils";
import { ProcessedColorToken } from "../page";
import { ColorPicker } from "../../brand-colors/ColorPicker";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/features/unorganized-components/ui/tooltip';

// Import components for previews
import { Button } from '@/features/unorganized-components/ui/button';
import { Badge } from '@/features/unorganized-components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/features/unorganized-components/ui/card';
import { Input } from '@/features/unorganized-components/ui/input';
import { Popover, PopoverContent, PopoverTrigger } from '@/features/unorganized-components/ui/popover';
import { Progress } from '@/features/unorganized-components/ui/progress';
import { ChartContainer } from '@/features/unorganized-components/ui/chart';
import { BarChart, Bar, XAxis, YAxis, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';
import { Separator } from '@/features/unorganized-components/ui/separator';
import { Switch } from '@/features/unorganized-components/ui/switch';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/features/unorganized-components/ui/carousel';
import { Avatar, AvatarFallback } from '@/features/unorganized-components/ui/avatar';
import { Checkbox } from '@/features/unorganized-components/ui/checkbox';
import { Label } from '@/features/unorganized-components/ui/label';
import { Textarea } from '@/features/unorganized-components/ui/textarea';
import { CheckCircle, AlertTriangle, Info, X, User, Settings, Palette, TrendingUp, Star, Heart, ShoppingCart, Bell, Search, Filter, Calendar, Mail, Phone, MapPin, ChevronRight, Play, Pause, Download, Share, Menu, Home, Users, BarChart3, FileText, Edit3, Trash2, Plus, Minus, Eye, EyeOff, Lock, Unlock, Cloud, Wifi, Battery, Signal } from 'lucide-react';

/*───────────────────────────────────────────────────────────────────────────*
  Types
 *──────────────────────────────────────────────────────────────────────────*/

interface ColorSwatch {
  name: string;
  color: string;
}

type RoleUIItem = {
  role: Role;
  statusLabel: string;
  baseClasses: string;
  buttonTitle: string;
  isAssignedGlobally: boolean;
  statusIndicatorBgClass: string;
  assignedColorHex: string | null;
  assignedByColorName: string | null;
  accessibleTextColor: OklchString;
  statusIndicatorAccessibleTextColor: OklchString;
};

type RoleGroupItem = {
  type: 'group';
  subCategoryName: string;
  description: string | null;
  roles: RoleUIItem[];
};

type FlattenedRoleItem = RoleGroupItem & {
  categoryName: string;
  icon: React.ElementType;
  categoryDescription: string;
};

interface ThemeRoleAssignmentGridProps {
  categorizedRoleUiData: Array<{
    categoryName: string;
    icon: React.ElementType;
    description: string;
    subCategories: Array<{
      subCategoryName: string;
      roles: RoleGroupItem[];
    }>;
  }> | null;
  actualSelectedColorData: ProcessedColorToken | null;
  handleRoleInteraction: (role: Role) => void;
  setSelectedColorName: (name: string | null) => void;
  swatches: ColorSwatch[];
  handleRoleColorChange: (role: Role, newColorHex: string) => void;
  onRoleClick?: (role: Role) => void;
  selectedRole?: Role | null;
}

/*───────────────────────────────────────────────────────────────────────────*
  Enhanced Component Preview Logic
 *──────────────────────────────────────────────────────────────────────────*/

const chartConfig = {
  desktop: { label: "Desktop", color: "var(--chart-1)" },
  mobile: { label: "Mobile", color: "var(--chart-2)" },
  tablet: { label: "Tablet", color: "var(--chart-3)" },
  other: { label: "Other", color: "var(--chart-4)" },
  gaming: { label: "Gaming", color: "var(--chart-5)" },
};

const chartData = [
  { name: "Q1", desktop: 400, mobile: 240, tablet: 120, other: 80, gaming: 60 },
  { name: "Q2", desktop: 300, mobile: 138, tablet: 180, other: 90, gaming: 70 },
  { name: "Q3", desktop: 200, mobile: 300, tablet: 160, other: 100, gaming: 80 },
];

const lineData = [
  { name: "Jan", revenue: 4000, users: 2400 },
  { name: "Feb", revenue: 3000, users: 1398 },
  { name: "Mar", revenue: 2000, users: 9800 },
  { name: "Apr", revenue: 2780, users: 3908 },
  { name: "May", revenue: 1890, users: 4800 },
];

const pieData = [
  { name: "Desktop", value: 400, color: "var(--chart-1)" },
  { name: "Mobile", value: 300, color: "var(--chart-2)" },
  { name: "Tablet", value: 200, color: "var(--chart-3)" },
  { name: "Other", value: 100, color: "var(--chart-4)" },
];

// Helper function to get role color or fallback
const getRoleColor = (roleName: Role, roles: RoleUIItem[], fallback: string = 'transparent'): string => {
  const role = roles.find(r => r.role === roleName);
  return role?.assignedColorHex || fallback;
};

// Helper function to get accessible text color
const getAccessibleText = (roleName: Role, roles: RoleUIItem[], fallback: string = 'currentColor'): string => {
  const role = roles.find(r => r.role === roleName);
  return role?.accessibleTextColor || fallback;
};

const renderSophisticatedPreview = (subCategoryName: string, categoryName: string, roles: RoleUIItem[]) => {
  // Create dynamic CSS variables for this preview
  const createDynamicStyles = (roleMap: Record<string, string>) => {
    return Object.entries(roleMap).reduce((acc, [key, roleName]) => {
      const color = getRoleColor(roleName as Role, roles, `var(--${roleName})`);
      if (color !== 'transparent' && color !== `var(--${roleName})`) {
        acc[`--preview-${key}` as string] = color;
      }
      return acc;
    }, {} as Record<string, string>);
  };

  switch (subCategoryName.toLowerCase()) {
    case 'primary':
      const primaryStyles = createDynamicStyles({ 'primary': 'primary', 'primary-fg': 'primary-foreground' });
      return (
        <div className="w-full h-8 flex items-center justify-center gap-2">
          <Button size="sm" className="h-6 text-xs px-2" style={{
            backgroundColor: primaryStyles['--preview-primary'] || 'var(--primary)',
            color: primaryStyles['--preview-primary-fg'] || 'var(--primary-foreground)',
          }}>
            <ShoppingCart className="w-3 h-3 mr-1" />
            Buy
          </Button>
          <Badge className="text-xs h-5" style={{
            backgroundColor: primaryStyles['--preview-primary'] || 'var(--primary)',
            color: primaryStyles['--preview-primary-fg'] || 'var(--primary-foreground)',
          }}>New</Badge>
        </div>
      );

    case 'secondary':
      const secondaryStyles = createDynamicStyles({ 'secondary': 'secondary', 'secondary-fg': 'secondary-foreground' });
      return (
        <div className="w-full h-8 flex items-center justify-center gap-2">
          <Button variant="secondary" size="sm" className="h-6 text-xs px-2" style={{
            backgroundColor: secondaryStyles['--preview-secondary'] || 'var(--secondary)',
            color: secondaryStyles['--preview-secondary-fg'] || 'var(--secondary-foreground)',
          }}>
            <Settings className="w-3 h-3 mr-1" />
            Options
          </Button>
          <Badge variant="secondary" className="text-xs h-5">Draft</Badge>
        </div>
      );

    case 'accent':
      const accentStyles = createDynamicStyles({ 'accent': 'accent' });
      return (
        <div className="w-full h-8 flex items-center justify-center gap-2">
          <Button variant="ghost" size="sm" className="h-6 text-xs px-2">
            <Palette className="w-3 h-3 mr-1" />
            Accent
          </Button>
          <Button variant="link" size="sm" className="h-6 text-xs px-2 underline" style={{
            color: accentStyles['--preview-accent'] || 'var(--accent)',
          }}>Link</Button>
        </div>
      );

    case 'destructive':
      const destructiveStyles = createDynamicStyles({ 'destructive': 'destructive', 'destructive-fg': 'destructive-foreground' });
      return (
        <div className="w-full h-8 flex items-center justify-center gap-2">
          <Button variant="destructive" size="sm" className="h-6 text-xs px-2" style={{
            backgroundColor: destructiveStyles['--preview-destructive'] || 'var(--destructive)',
            color: destructiveStyles['--preview-destructive-fg'] || 'var(--destructive-foreground)',
          }}>
            <X className="w-3 h-3 mr-1" />
            Delete
          </Button>
          <Badge variant="destructive" className="text-xs h-5">Error</Badge>
        </div>
      );

    case 'card':
      const cardStyles = createDynamicStyles({ 'card': 'card', 'background': 'background' });
      return (
        <div className="w-full h-8 flex items-center justify-center">
          <Card className="h-8 px-2 py-1 border flex items-center" style={{
            backgroundColor: cardStyles['--preview-card'] || 'var(--card)',
          }}>
            <User className="w-3 h-3 mr-1" />
            <span className="text-xs">Card Surface</span>
          </Card>
        </div>
      );

    case 'chart palette':
      return (
        <div className="w-full h-8 flex items-center justify-center gap-1">
          {[1, 2, 3, 4, 5].map(i => (
            <div key={i} className="w-3 h-6 rounded-sm" style={{ backgroundColor: `var(--chart-${i})` }}></div>
          ))}
        </div>
      );

    default:
      return (
        <div className="w-full h-8 flex items-center justify-center">
          <Button size="sm" className="h-6 text-xs px-2">Preview</Button>
        </div>
      );
  }
};

/*───────────────────────────────────────────────────────────────────────────*
  Main component
 *──────────────────────────────────────────────────────────────────────────*/
export const ThemeRoleAssignmentGrid: React.FC<ThemeRoleAssignmentGridProps> = ({
  categorizedRoleUiData,
  actualSelectedColorData,
  setSelectedColorName,
  swatches,
  handleRoleColorChange,
  onRoleClick,
  selectedRole,
}) => {
  const cleanupRef = useRef<(() => void) | null>(null);

  /* Restore CSS vars on unmount */
  useEffect(() => () => cleanupRef.current?.(), []);

  const allRoleItems = React.useMemo(() => {
    if (!categorizedRoleUiData) {
      return [];
    }
    return categorizedRoleUiData.flatMap(({ categoryName, icon, description: categoryDescription, subCategories }) =>
      subCategories.flatMap(({ roles }) =>
        roles.map(roleGroup => ({
          ...roleGroup,
          categoryName,
          icon,
          categoryDescription,
        }))
      )
    );
  }, [categorizedRoleUiData]);

  /*───────────────────────────────────────────────────────────────────────*/
  return (
    <GridCol className="col-span-5 border-dashed border-[var(--border)]/50 text-xs" style={{ fontFamily: "var(--font-code, var(--font-mono, monospace))" }}>
      <div className="columns-4 gap-4 space-y-4">
        {allRoleItems.map((item: FlattenedRoleItem, index: number) => {
          const { categoryName, icon: Icon, categoryDescription, subCategoryName, description, roles } = item;

          const primaryRole = roles[0];
          const secondaryRole = roles.length > 1 ? roles[1] : null;

          const previewBg = { backgroundColor: primaryRole.assignedColorHex ?? 'transparent' } as React.CSSProperties;
          const previewFg = { color: secondaryRole ? (secondaryRole.assignedColorHex ?? primaryRole.accessibleTextColor) : primaryRole.accessibleTextColor } as React.CSSProperties;
          const isChartCategory = categoryName === 'Charts & Data Visualization';
          const isUnassigned = !primaryRole.assignedColorHex && !isChartCategory;

          const isInRoleViewMode = selectedRole !== null && selectedRole !== undefined;
          const shouldDisable = !actualSelectedColorData && !isInRoleViewMode;

          const sophisticatedPreview = renderSophisticatedPreview(subCategoryName, categoryName, roles);

          return (
            <div
              key={`${primaryRole.role}-${index}`}
              className={`flex flex-col rounded-[var(--radius-md)] border border-[var(--border)] shadow-[var(--shadow-xs)] break-inside-avoid transition-all duration-200 hover:shadow-[var(--shadow-sm)] ${isUnassigned ? 'opacity-70 hover:opacity-100' : 'opacity-100'}`}
              style={previewBg}
            >
              {/* Enhanced Component Preview Section */}
              {sophisticatedPreview && (
                <div className="p-2 bg-[var(--background)]/95 backdrop-blur-sm border-b border-[var(--border)]/30 rounded-t-[var(--radius-md)] max-h-24 overflow-hidden">
                  <div className="flex items-center justify-center h-full min-h-[32px] max-h-20">
                    {sophisticatedPreview}
                  </div>
                </div>
              )}

              <div
                className="flex items-center flex-grow p-2 h-10 max-h-10"
                style={isChartCategory ? { color: 'var(--foreground)' } : previewFg}
              >
                {description ? (
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span className="font-bold text-sm cursor-help">Aa</span>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="p-1 max-w-xs text-xs">{description}</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                ) : (
                  <span className="font-bold text-sm">Aa</span>
                )}
                <span className="ml-2 text-xs truncate">{subCategoryName}</span>
                <div className="ml-auto">
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Icon className="h-3 w-3 cursor-pointer transition-opacity hover:opacity-80" style={{ color: 'currentColor', opacity: 0.6 }} />
                      </TooltipTrigger>
                      <TooltipContent>
                        <div className="flex items-center p-2 max-w-xs">
                          <Icon className="h-12 w-12 mr-3 text-muted-foreground" />
                          <div>
                            <h6 className="font-semibold text-xs mb-1">{categoryName}</h6>
                            <p className="text-xs text-[var(--muted-foreground)]">{categoryDescription}</p>
                          </div>
                        </div>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              </div>
              <div className="bg-[var(--background)]/60 backdrop-blur-sm p-1.5 border-t border-[var(--border)]/50 space-y-1">
                {roles.map((roleItem) => (
                  <div
                    key={roleItem.role}
                    role="button"
                    tabIndex={shouldDisable ? -1 : 0}
                    aria-disabled={shouldDisable}
                    onClick={() => onRoleClick?.(roleItem.role)}
                    className="flex items-center justify-between text-[10px] cursor-pointer rounded-sm p-1 -m-1 transition-all duration-150 hover:bg-white/10 hover:scale-[1.02]"
                  >
                    <span className="font-medium">{roleItem.role.replace(/-/g, " ")}</span>
                    <ColorPicker
                      value={roleItem.assignedColorHex ?? '#ffffff'}
                      onChange={(newHex) => handleRoleColorChange(roleItem.role, newHex)}
                      swatches={swatches}
                      className="!h-4 !w-4 rounded-[var(--radius-sm)] border border-[var(--border)]/50 transition-transform hover:scale-110"
                    />
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>
    </GridCol>
  );
};