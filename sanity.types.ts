/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Route404Settings = {
  _id: string;
  _type: "route404Settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
  buttonText?: string;
  buttonLink?: string;
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blocks?: Array<{
    _key: string;
  } & Hero1Block | {
    _key: string;
  } & Hero2Block | {
    _key: string;
  } & Hero3Block | {
    _key: string;
  } & SectionHeaderBlock | {
    _key: string;
  } & SplitRowBlock | {
    _key: string;
  } & Carousel1Block | {
    _key: string;
  } & Carousel2Block | {
    _key: string;
  } & TimelineRowBlock | {
    _key: string;
  } & Cta1Block | {
    _key: string;
  } & LogoCloud1Block | {
    _key: string;
  } & FaqsBlock | {
    _key: string;
  } & FormNewsletterBlock | {
    _key: string;
  } & SplitContentBlock | {
    _key: string;
  } & SplitCardsListBlock | {
    _key: string;
  } & SplitImageBlock | {
    _key: string;
  } & SplitInfoListBlock | {
    _key: string;
  } & GridCardBlock | {
    _key: string;
  } & GridPostBlock | {
    _key: string;
  } & GridRowBlock | {
    _key: string;
  } & PricingCardBlock | {
    _key: string;
  } & HeadingAndParagraphCenteredBlock | {
    _key: string;
  } & ServiceGridBlock | {
    _key: string;
  } & CoverMapBlock | {
    _key: string;
  } & ContactInfoAndFormBlock | {
    _key: string;
  } & OurValuesBlock | {
    _key: string;
  } & CourseSliderBlock | {
    _key: string;
  } & Hero4Block | {
    _key: string;
  } & Hero5Block | {
    _key: string;
  } & CustomContactFormBlock | {
    _key: string;
  } & TwoColumnBlock | {
    _key: string;
  } & SeperatorBlock>;
  meta_title?: string;
  meta_description?: string;
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  frontPage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page-slug";
  };
  privacyPolicyPage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page-slug";
  };
};

export type MetadataSettings = {
  _id: string;
  _type: "metadataSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  metadata?: {
    title?: string;
    desc?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
};

export type HeaderSettings = {
  _id: string;
  _type: "headerSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  enableTopBar?: boolean;
  topBar?: {
    justifyContent?: "justify-between" | "justify-evenly" | "justify-around" | "justify-start" | "justify-center" | "justify-end";
    items?: Array<{
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page-slug";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "blog-slug";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "service-slug";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course-slug";
      };
      icon?: Icon;
      hideOnMobile?: boolean;
      linkStyle?: "default" | "button";
      _type: "internalLinkObject";
      _key: string;
    } | {
      href?: string;
      icon?: Icon;
      hideOnMobile?: boolean;
      linkStyle?: "default" | "button";
      _type: "link";
      _key: string;
    } | {
      title?: string;
      icon?: Icon;
      items?: Array<{
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page-slug";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "blog-slug";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "service-slug";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course-slug";
        };
        icon?: Icon;
        customTitle?: string;
        hideOnMobile?: boolean;
        linkStyle?: "default" | "button";
        _type: "internalLinkObject";
        _key: string;
      } | {
        href?: string;
        icon?: Icon;
        customTitle?: string;
        hideOnMobile?: boolean;
        linkStyle?: "default" | "button";
        _type: "link";
        _key: string;
      } | {
        file?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          _type: "file";
        };
        icon?: Icon;
        customTitle?: string;
        hideOnMobile?: boolean;
        linkStyle?: "default" | "button";
        _type: "downloadLinkObject";
        _key: string;
      } | {
        title?: string;
        icon?: Icon;
        links?: Array<{
          internalLink?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page-slug";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "blog-slug";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "service-slug";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "course-slug";
          };
          icon?: Icon;
          customTitle?: string;
          hideOnMobile?: boolean;
          linkStyle?: "default" | "button";
          _type: "internalLinkObject";
          _key: string;
        } | {
          href?: string;
          icon?: Icon;
          customTitle?: string;
          hideOnMobile?: boolean;
          linkStyle?: "default" | "button";
          _type: "link";
          _key: string;
        } | {
          file?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
            };
            _type: "file";
          };
          icon?: Icon;
          customTitle?: string;
          hideOnMobile?: boolean;
          linkStyle?: "default" | "button";
          _type: "downloadLinkObject";
          _key: string;
        }>;
        hideOnMobile?: boolean;
        _type: "dropdownGroup";
        _key: string;
      }>;
      hideOnMobile?: boolean;
      _type: "linkGroup";
      _key: string;
    }>;
  };
  logoOptions?: {
    logoType?: "svgloop" | "lightAndDark" | "default";
    svgloopLogo?: string;
    defaultLogo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    lightAndDarkLogo?: {
      logoType?: "svg" | "image";
      lightLogo?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      darkLogo?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
    };
  };
  navigationConfig?: {
    justifyContent?: "justify-between" | "justify-evenly" | "justify-around" | "justify-start" | "justify-center" | "justify-end";
  };
  navigationItems?: Array<{
    internalLink?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page-slug";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "blog-slug";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "service-slug";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "course-slug";
    };
    icon?: Icon;
    customTitle?: string;
    linkStyle?: "default" | "button";
    _type: "internalLinkObject";
    _key: string;
  } | {
    href?: string;
    icon?: Icon;
    customTitle?: string;
    linkStyle?: "default" | "button";
    _type: "link";
    _key: string;
  } | {
    title?: string;
    links?: Array<{
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page-slug";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "blog-slug";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "service-slug";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course-slug";
      };
      icon?: Icon;
      customTitle?: string;
      linkStyle?: "default" | "button";
      _type: "internalLinkObject";
      _key: string;
    } | {
      href?: string;
      icon?: Icon;
      customTitle?: string;
      linkStyle?: "default" | "button";
      _type: "link";
      _key: string;
    } | {
      file?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        _type: "file";
      };
      icon?: Icon;
      customTitle?: string;
      linkStyle?: "default" | "button";
      _type: "downloadLinkObject";
      _key: string;
    }>;
    _type: "dropdownGroup";
    _key: string;
  } | {
    title?: string;
    items?: Array<{
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page-slug";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "blog-slug";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "service-slug";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course-slug";
      };
      icon?: Icon;
      customTitle?: string;
      linkStyle?: "default" | "button";
      _type: "internalLinkObject";
      _key: string;
    } | {
      href?: string;
      icon?: Icon;
      customTitle?: string;
      linkStyle?: "default" | "button";
      _type: "link";
      _key: string;
    } | {
      file?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        _type: "file";
      };
      icon?: Icon;
      customTitle?: string;
      linkStyle?: "default" | "button";
      _type: "downloadLinkObject";
      _key: string;
    } | {
      title?: string;
      links?: Array<{
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page-slug";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "blog-slug";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "service-slug";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course-slug";
        };
        icon?: Icon;
        customTitle?: string;
        linkStyle?: "default" | "button";
        _type: "internalLinkObject";
        _key: string;
      } | {
        href?: string;
        icon?: Icon;
        customTitle?: string;
        linkStyle?: "default" | "button";
        _type: "link";
        _key: string;
      } | {
        file?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          _type: "file";
        };
        icon?: Icon;
        customTitle?: string;
        linkStyle?: "default" | "button";
        _type: "downloadLinkObject";
        _key: string;
      }>;
      _type: "dropdownGroup";
      _key: string;
    }>;
    _type: "linkGroup";
    _key: string;
  }>;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type FooterSettings = {
  _id: string;
  _type: "footerSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  blocks?: Array<{
    _key: string;
  } & Hero1Block | {
    _key: string;
  } & Hero2Block | {
    _key: string;
  } & Hero3Block | {
    _key: string;
  } & SectionHeaderBlock | {
    _key: string;
  } & SplitRowBlock | {
    _key: string;
  } & Carousel1Block | {
    _key: string;
  } & Carousel2Block | {
    _key: string;
  } & TimelineRowBlock | {
    _key: string;
  } & Cta1Block | {
    _key: string;
  } & LogoCloud1Block | {
    _key: string;
  } & FaqsBlock | {
    _key: string;
  } & FormNewsletterBlock | {
    _key: string;
  } & SplitContentBlock | {
    _key: string;
  } & SplitCardsListBlock | {
    _key: string;
  } & SplitImageBlock | {
    _key: string;
  } & SplitInfoListBlock | {
    _key: string;
  } & GridCardBlock | {
    _key: string;
  } & GridPostBlock | {
    _key: string;
  } & GridRowBlock | {
    _key: string;
  } & PricingCardBlock | {
    _key: string;
  } & HeadingAndParagraphCenteredBlock | {
    _key: string;
  } & ServiceGridBlock | {
    _key: string;
  } & CoverMapBlock | {
    _key: string;
  } & ContactInfoAndFormBlock | {
    _key: string;
  } & OurValuesBlock | {
    _key: string;
  } & CourseSliderBlock | {
    _key: string;
  } & Hero4Block | {
    _key: string;
  } & Hero5Block | {
    _key: string;
  } & CustomContactFormBlock | {
    _key: string;
  } & TwoColumnBlock | {
    _key: string;
  } & SeperatorBlock>;
  ctaText?: string;
  infoText?: string;
  contactInfo?: string;
  socialMediaLinks?: Array<{
    platform?: string;
    url?: string;
    _key: string;
  }>;
};

export type SeperatorBlock = {
  _type: "seperator-block";
  padding?: SectionPadding;
};

export type TwoColumnBlock = {
  _type: "two-column-block";
  firstColumn?: {
    blockContent?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }>;
  };
  secondColumn?: {
    blockContent?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }>;
  };
};

export type Hero5Block = {
  _type: "hero-5-block";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Hero4Block = {
  _type: "hero-4-block";
  title?: string;
  description?: string;
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  showOverlay?: boolean;
  topOverlayStrength?: number;
  upperCenterOverlayStrength?: number;
  lowerCenterOverlayStrength?: number;
  bottomOverlayStrength?: number;
};

export type CourseSliderBlock = {
  _type: "course-slider-block";
  title?: string;
  sectionId?: string;
  courses?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course-slug";
  }>;
};

export type OurValuesBlock = {
  _type: "our-values-block";
  values?: Array<{
    icon?: Icon;
    title?: string;
    description?: string;
    _type: "value";
    _key: string;
  }>;
};

export type ContactInfoAndFormBlock = {
  _type: "contact-info-and-form-block";
  contactHeading?: string;
  contactDescription?: string;
  contactEmail?: string;
  contactPhone?: string;
  contactAddress?: string;
  customContactForm?: CustomContactFormBlock;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type ServiceGridBlock = {
  _type: "service-grid-block";
  services?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "service-slug";
  } | {
    title?: string;
    link?: string;
    featuredImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "manualService";
    _key: string;
  }>;
};

export type HeadingAndParagraphCenteredBlock = {
  _type: "heading-and-paragraph-centered-block";
  heading?: string;
  paragraph?: string;
};

export type Timeline1Block = {
  _type: "timeline-1-block";
  title?: string;
  tagLine?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
};

export type PricingCardBlock = {
  _type: "pricing-card-block";
  title?: string;
  tagLine?: string;
  price?: {
    value?: number;
    period?: string;
  };
  list?: Array<string>;
  excerpt?: string;
  link?: Link;
};

export type GridRowBlock = {
  _type: "grid-row-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  gridColumns?: "grid-cols-2" | "grid-cols-3" | "grid-cols-4";
  columns?: Array<{
    _key: string;
  } & GridCardBlock | {
    _key: string;
  } & GridPostBlock | {
    _key: string;
  } & PricingCardBlock>;
};

export type GridPostBlock = {
  _type: "grid-post-block";
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "blog-slug";
  };
};

export type GridCardBlock = {
  _type: "grid-card-block";
  title?: string;
  excerpt?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  link?: Link;
};

export type SplitInfoItemBlock = {
  _type: "split-info-item-block";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
  tags?: Array<string>;
};

export type SplitCardsItemBlock = {
  _type: "split-cards-item-block";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
};

export type SplitInfoListBlock = {
  _type: "split-info-list-block";
  list?: Array<{
    _key: string;
  } & SplitInfoItemBlock>;
};

export type SplitImageBlock = {
  _type: "split-image-block";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SplitCardsListBlock = {
  _type: "split-cards-list-block";
  list?: Array<{
    _key: string;
  } & SplitCardsItemBlock>;
};

export type SplitContentBlock = {
  _type: "split-content-block";
  sticky?: boolean;
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
  link?: Link;
};

export type FormNewsletterBlock = {
  _type: "form-newsletter-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  stackAlign?: "left" | "center";
  consentText?: string;
  buttonText?: string;
  successMessage?: string;
};

export type LogoCloud1Block = {
  _type: "logo-cloud-1-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  title?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Cta1Block = {
  _type: "cta-1-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  sectionWidth?: "default" | "narrow";
  stackAlign?: "left" | "center";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
  links?: Array<{
    _key: string;
  } & Link>;
};

export type TimelineRowBlock = {
  _type: "timeline-row-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  timelines?: Array<{
    _key: string;
  } & Timeline1Block>;
};

export type Carousel2Block = {
  _type: "carousel-2-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  testimonial?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "testimonial";
  }>;
};

export type Carousel1Block = {
  _type: "carousel-1-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  size?: "one" | "two" | "three";
  indicators?: "none" | "dots" | "count";
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type SplitRowBlock = {
  _type: "split-row-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  noGap?: boolean;
  splitColumns?: Array<{
    _key: string;
  } & SplitContentBlock | {
    _key: string;
  } & SplitCardsListBlock | {
    _key: string;
  } & SplitImageBlock | {
    _key: string;
  } & SplitInfoListBlock>;
};

export type SectionHeaderBlock = {
  _type: "section-header-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  sectionWidth?: "default" | "narrow";
  stackAlign?: "left" | "center";
  tagLine?: string;
  title?: string;
  description?: string;
};

export type Hero3Block = {
  _type: "hero-3-block";
  titleOrange?: string;
  titleWhite?: string;
  subtitle?: string;
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  showOverlay?: boolean;
  overlayColor?: "dark" | "light";
  topOverlayStrength?: number;
  upperCenterOverlayStrength?: number;
  lowerCenterOverlayStrength?: number;
  bottomOverlayStrength?: number;
};

export type Hero2Block = {
  _type: "hero-2-block";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
  links?: Array<{
    _key: string;
  } & Link>;
};

export type Hero1Block = {
  _type: "hero-1-block";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  imagePosition?: "right" | "left";
  links?: Array<{
    _key: string;
  } & Link>;
};

export type InternalLink = {
  _ref: string;
  _type: "reference";
  _weak?: boolean;
  [internalGroqTypeReferenceTo]?: "page-slug";
} | {
  _ref: string;
  _type: "reference";
  _weak?: boolean;
  [internalGroqTypeReferenceTo]?: "blog-slug";
} | {
  _ref: string;
  _type: "reference";
  _weak?: boolean;
  [internalGroqTypeReferenceTo]?: "service-slug";
} | {
  _ref: string;
  _type: "reference";
  _weak?: boolean;
  [internalGroqTypeReferenceTo]?: "course-slug";
};

export type ExternalLink = string;

export type ButtonVariant = "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";

export type SectionPadding = {
  _type: "section-padding";
  top?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
  bottom?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
};

export type ColorVariant = "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";

export type Link = {
  _type: "link";
  title?: string;
  href?: string;
  target?: boolean;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
} | {
  videoId?: string;
  _type: "youtube";
  _key: string;
}>;

export type CourseSlug = {
  _id: string;
  _type: "course-slug";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  aboutCourse?: BlockContent;
  keyConcepts?: Array<{
    title?: string;
    description?: string;
    icon?: Icon;
    _type: "concept";
    _key: string;
  }>;
  body?: BlockContent;
  customContactForm?: CustomContactFormBlock;
  excerpt?: string;
  digitalCourse?: {
    enabled?: boolean;
    icon?: Icon;
    title?: string;
    description?: string;
  };
  map?: CoverMapBlock;
  faqs?: FaqsBlock;
};

export type CoverMapBlock = {
  _type: "cover-map-block";
  center?: Geopoint;
  zoom?: number;
  height?: {
    type?: "auto" | "px";
    height?: number;
  };
  animateIntro?: {
    enabled?: boolean;
    initialZoom?: number;
    initialPitch?: number;
    duration?: number;
  };
  bearingRotation?: {
    enabled?: boolean;
    speed?: number;
    introDelay?: number;
  };
  radiusAnimation?: {
    enabled?: boolean;
    duration?: number;
    spawnInterval?: number;
    radius?: number;
    opacity?: {
      startOpacity?: number;
      endOpacity?: number;
    };
    color?: string;
  };
};

export type ServiceSlug = {
  _id: string;
  _type: "service-slug";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  customTitle?: string;
  slug?: Slug;
  layout?: "side-by-side" | "form-below";
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: BlockContent;
  customContactForm?: CustomContactFormBlock;
  excerpt?: string;
  faqs?: FaqsBlock;
};

export type FaqsBlock = {
  _type: "faqs-block";
  faqs?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "faq";
  }>;
  noPadding?: boolean;
  faqsByCategory?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "faqCategory";
  }>;
};

export type CustomContactFormBlock = {
  _type: "custom-contact-form-block";
  formTitle?: string;
  formDescription?: string;
  submitButtonText?: string;
  successMessage?: string;
  formFields?: Array<{
    fieldType?: "text" | "email" | "tel" | "textarea" | "checkbox" | "checkboxGroup" | "select" | "date" | "datetime" | "radio" | "file" | "heading";
    fieldName?: string;
    fieldLabel?: string;
    placeholder?: string;
    isRequired?: boolean;
    width?: "full" | "half" | "third" | "quarter" | "remaining";
    options?: Array<{
      label?: string;
      useUniqueValue?: boolean;
      value?: string;
      _type: "optionItem";
      _key: string;
    }>;
    helpText?: string;
    labelOnly?: boolean;
    preChecked?: boolean;
    conditionalLogic?: {
      enabled?: boolean;
      controllerFieldName?: string;
      action?: "show" | "hide";
      controllerValueChecked?: "true" | "false";
    };
    _type: "formField";
    _key: string;
  }>;
};

export type BlogSlug = {
  _id: string;
  _type: "blog-slug";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  body?: BlockContent;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type PageSlug = {
  _id: string;
  _type: "page-slug";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  navigationSettings?: {
    navigationTextColor?: "dark" | "white";
  };
  blocks?: Array<{
    _key: string;
  } & Hero1Block | {
    _key: string;
  } & Hero2Block | {
    _key: string;
  } & Hero3Block | {
    _key: string;
  } & SectionHeaderBlock | {
    _key: string;
  } & SplitRowBlock | {
    _key: string;
  } & Carousel1Block | {
    _key: string;
  } & Carousel2Block | {
    _key: string;
  } & TimelineRowBlock | {
    _key: string;
  } & Cta1Block | {
    _key: string;
  } & LogoCloud1Block | {
    _key: string;
  } & FaqsBlock | {
    _key: string;
  } & FormNewsletterBlock | {
    _key: string;
  } & SplitContentBlock | {
    _key: string;
  } & SplitCardsListBlock | {
    _key: string;
  } & SplitImageBlock | {
    _key: string;
  } & SplitInfoListBlock | {
    _key: string;
  } & GridCardBlock | {
    _key: string;
  } & GridPostBlock | {
    _key: string;
  } & GridRowBlock | {
    _key: string;
  } & PricingCardBlock | {
    _key: string;
  } & HeadingAndParagraphCenteredBlock | {
    _key: string;
  } & ServiceGridBlock | {
    _key: string;
  } & CoverMapBlock | {
    _key: string;
  } & ContactInfoAndFormBlock | {
    _key: string;
  } & OurValuesBlock | {
    _key: string;
  } & CourseSliderBlock | {
    _key: string;
  } & Hero4Block | {
    _key: string;
  } & Hero5Block | {
    _key: string;
  } & CustomContactFormBlock | {
    _key: string;
  } & TwoColumnBlock | {
    _key: string;
  } & SeperatorBlock>;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  orderRank?: string;
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: BlockContent;
  rating?: number;
  orderRank?: string;
};

export type FaqCategory = {
  _id: string;
  _type: "faqCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  body?: BlockContent;
  orderRank?: string;
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "faqCategory";
  }>;
  body?: BlockContent;
  orderRank?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  orderRank?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  orderRank?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Icon = {
  _type: "icon";
  name?: string;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | Route404Settings | SiteSettings | MetadataSettings | HeaderSettings | SanityFileAsset | FooterSettings | SeperatorBlock | TwoColumnBlock | Hero5Block | Hero4Block | CourseSliderBlock | OurValuesBlock | ContactInfoAndFormBlock | Geopoint | ServiceGridBlock | HeadingAndParagraphCenteredBlock | Timeline1Block | PricingCardBlock | GridRowBlock | GridPostBlock | GridCardBlock | SplitInfoItemBlock | SplitCardsItemBlock | SplitInfoListBlock | SplitImageBlock | SplitCardsListBlock | SplitContentBlock | FormNewsletterBlock | LogoCloud1Block | Cta1Block | TimelineRowBlock | Carousel2Block | Carousel1Block | SplitRowBlock | SectionHeaderBlock | Hero3Block | Hero2Block | Hero1Block | InternalLink | ExternalLink | ButtonVariant | SectionPadding | ColorVariant | Link | BlockContent | CourseSlug | CoverMapBlock | ServiceSlug | FaqsBlock | CustomContactFormBlock | BlogSlug | PageSlug | Testimonial | FaqCategory | Faq | Category | Author | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Icon | MediaTag | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/(main)/(root)/(index)/_page-index-core-utilities/page-index.route-query.ts
// Variable: GET_FRONT_PAGE_QUERY
// Query: *[_type == "siteSettings"][0].frontPage->{      blocks[]{  // Hero Blocks    _type == "hero-1-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    imagePosition,    links,  },    _type == "hero-2-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },    _type == "hero-3-block" => {    _type,    titleOrange,    titleWhite,    subtitle,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    showOverlay,    "overlayColor": select(            overlayColor == "dark" => "0,0,0",      overlayColor == "light" => "255,255,255",      overlayColor    ),        topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },    _type == "hero-4-block" => {    _type,    title,    description,    showOverlay,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },  // Section/Header Blocks    _type == "section-header-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link,  },    _type == "heading-and-paragraph-centered-block" => {    _type,    heading,    paragraph,  },  // Carousel Blocks    _type == "carousel-1-block" => {    _type,    padding,    colorVariant,    size,    orientation,    indicators,    images[]{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    }  },    _type == "carousel-2-block" => {    _type,    padding,    colorVariant,    testimonial[]->{    _id,    name,    title,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }    },      alt    },  },      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      rating,    },  // Timeline    _type == "timeline-row-block" => {    _type,    padding,    colorVariant,    timelines[]{      title,      tagLine,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },  // Call to Action    _type == "cta-1-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },  // Logo Cloud    _type == "logo-cloud-1-block" => {    _type,    padding,    colorVariant,    title,    images[]{      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },  },  // FAQs    _type == "faqs-block" => {    _type,    noPadding,    faqs[]->{      _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }},        faqsByCategory[]->{      _id,      title,      "faqs": *[_type == "faq" && references(^._id)] {            _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }        }      }  },  // Newsletter    _type == "form-newsletter-block" => {    _type,    padding,    colorVariant,    stackAlign,    consentText,    buttonText,    successMessage,  },  // Split Blocks    _type == "split-row-block" => {    _type,    padding,    colorVariant,    noGap,    splitColumns[]{        _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },        _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },        _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },    },  },    _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },    _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },    _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },    _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },  // Grid Blocks    _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },    _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    _type == "grid-row-block" => {    _type,    padding,    colorVariant,    gridColumns,    columns[]{        _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },        _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },        _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    },  },  // Pricing    _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },  // Service    _type == "service-grid-block" => {    _type,    services[]{      _type == "manualService" => {         title,         link,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      },      _type != "manualService" => @->{         _id,         title,         slug,         excerpt,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      }    },  },  // Cover Map    _type == "cover-map-block" => {    _type,    center,    zoom,    height,    animateIntro,    bearingRotation,    radiusAnimation,    color,  },  // Contact Info    _type == "contact-info-and-form-block" => {    _type,      contactHeading,      contactDescription,      contactEmail,      contactPhone,      contactAddress,      customContactForm{         _type,    formTitle,    formDescription,    submitButtonText,    successMessage,    formFields[] {      fieldType,      fieldName,      fieldLabel,      placeholder,      isRequired,      width,      helpText,      labelOnly,      preChecked,      options[] {        label,        "value": select(value != null && value != "" => value, label)      },      conditionalLogic {        enabled,        controllerFieldName,        action,        controllerValueChecked      }  }    },    },  // Our Values    _type == "our-values-block" => {    _type,    values  },  // Course Slider    _type == "course-slider-block" => {    _type,    title,    sectionId,    courses[]->{      _id,      title,      "slug": slug.current,      featuredImage{            crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }      },      excerpt,    }  },    _type == "hero-5-block" => {    _type,    image{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },  },  // Two Column    _type == "two-column-block" => {    _type,    firstColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    },    secondColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    }  },  // Seperator    _type == "seperator-block" => {    _type,    padding,  }  // ADD VALUE 3 ABOVE},    meta_title,    meta_description,    noindex,    navigationSettings {      navigationTextColor,    },    navigationTextColor,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }  }
export type GET_FRONT_PAGE_QUERYResult = {
  blocks: Array<{
    _type: "carousel-1-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    size: "one" | "three" | "two" | null;
    orientation: null;
    indicators: "count" | "dots" | "none" | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    }> | null;
  } | {
    _type: "carousel-2-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    testimonial: Array<{
      _id: string;
      name: string | null;
      title: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: null;
      } | null;
    }> | null;
    body: null;
    rating: null;
  } | {
    _type: "contact-info-and-form-block";
    contactHeading: string | null;
    contactDescription: string | null;
    contactEmail: string | null;
    contactPhone: string | null;
    contactAddress: string | null;
    customContactForm: {
      _type: "custom-contact-form-block";
      formTitle: string | null;
      formDescription: string | null;
      submitButtonText: string | null;
      successMessage: string | null;
      formFields: Array<{
        fieldType: "checkbox" | "checkboxGroup" | "date" | "datetime" | "email" | "file" | "heading" | "radio" | "select" | "tel" | "text" | "textarea" | null;
        fieldName: string | null;
        fieldLabel: string | null;
        placeholder: string | null;
        isRequired: boolean | null;
        width: "full" | "half" | "quarter" | "remaining" | "third" | null;
        helpText: string | null;
        labelOnly: boolean | null;
        preChecked: boolean | null;
        options: Array<{
          label: string | null;
          value: string | null;
        }> | null;
        conditionalLogic: {
          enabled: boolean | null;
          controllerFieldName: string | null;
          action: "hide" | "show" | null;
          controllerValueChecked: "false" | "true" | null;
        } | null;
      }> | null;
    } | null;
  } | {
    _type: "course-slider-block";
    title: string | null;
    sectionId: string | null;
    courses: Array<{
      _id: string;
      title: string | null;
      slug: string | null;
      featuredImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
      excerpt: string | null;
    }> | null;
  } | {
    _type: "cover-map-block";
    center: Geopoint | null;
    zoom: number | null;
    height: {
      type?: "auto" | "px";
      height?: number;
    } | null;
    animateIntro: {
      enabled?: boolean;
      initialZoom?: number;
      initialPitch?: number;
      duration?: number;
    } | null;
    bearingRotation: {
      enabled?: boolean;
      speed?: number;
      introDelay?: number;
    } | null;
    radiusAnimation: {
      enabled?: boolean;
      duration?: number;
      spawnInterval?: number;
      radius?: number;
      opacity?: {
        startOpacity?: number;
        endOpacity?: number;
      };
      color?: string;
    } | null;
    color: null;
  } | {
    _type: "cta-1-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    links: Array<{
      _key: string;
    } & Link> | null;
  } | {
    _type: "faqs-block";
    noPadding: boolean | null;
    faqs: Array<{
      _id: string;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
    faqsByCategory: Array<{
      _id: string;
      title: string | null;
      faqs: Array<{
        _id: string;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }>;
    }> | null;
  } | {
    _type: "form-newsletter-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    stackAlign: "center" | "left" | null;
    consentText: string | null;
    buttonText: string | null;
    successMessage: string | null;
  } | {
    _type: "grid-card-block";
    title: string | null;
    excerpt: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    link: Link | null;
  } | {
    _type: "grid-post-block";
    title: string | null;
    slug: Slug | null;
    excerpt: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    categories: Array<{
      title: string | null;
    }> | null;
  } | {
    _type: "grid-post-block";
  } | {
    _type: "grid-row-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    gridColumns: "grid-cols-2" | "grid-cols-3" | "grid-cols-4" | null;
    columns: Array<{
      _type: "grid-card-block";
      title: string | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      link: Link | null;
    } | {
      _type: "grid-post-block";
      title: string | null;
      slug: Slug | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      categories: Array<{
        title: string | null;
      }> | null;
    } | {
      _type: "grid-post-block";
    } | {
      _type: "pricing-card-block";
      title: string | null;
      tagLine: string | null;
      price: {
        value?: number;
        period?: string;
      } | null;
      list: Array<string> | null;
      excerpt: string | null;
      link: Link | null;
    }> | null;
  } | {
    _type: "heading-and-paragraph-centered-block";
    heading: string | null;
    paragraph: string | null;
  } | {
    _type: "hero-1-block";
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    imagePosition: "left" | "right" | null;
    links: Array<{
      _key: string;
    } & Link> | null;
  } | {
    _type: "hero-2-block";
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    links: Array<{
      _key: string;
    } & Link> | null;
  } | {
    _type: "hero-3-block";
    titleOrange: string | null;
    titleWhite: string | null;
    subtitle: string | null;
    backgroundImage: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      darkScore: number | NaN;
      asset: {
        _id: string;
        title: string | null;
        altText: string | null;
        description: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            aspectRatio: number | null;
            width: number | null;
            height: number | null;
          } | null;
          palette: {
            dominant: {
              background: string | null;
              foreground: string | null;
              population: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
    showOverlay: boolean | null;
    overlayColor: "0,0,0" | "255,255,255" | "dark" | "light" | null;
    topOverlayStrength: number | null;
    upperCenterOverlayStrength: number | null;
    lowerCenterOverlayStrength: number | null;
    bottomOverlayStrength: number | null;
  } | {
    _type: "hero-4-block";
    title: string | null;
    description: string | null;
    showOverlay: boolean | null;
    backgroundImage: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      darkScore: number | NaN;
      asset: {
        _id: string;
        title: string | null;
        altText: string | null;
        description: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            aspectRatio: number | null;
            width: number | null;
            height: number | null;
          } | null;
          palette: {
            dominant: {
              background: string | null;
              foreground: string | null;
              population: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
    topOverlayStrength: number | null;
    upperCenterOverlayStrength: number | null;
    lowerCenterOverlayStrength: number | null;
    bottomOverlayStrength: number | null;
  } | {
    _type: "hero-5-block";
    image: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      darkScore: number | NaN;
      asset: {
        _id: string;
        title: string | null;
        altText: string | null;
        description: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            aspectRatio: number | null;
            width: number | null;
            height: number | null;
          } | null;
          palette: {
            dominant: {
              background: string | null;
              foreground: string | null;
              population: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | {
    _type: "logo-cloud-1-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    title: string | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    }> | null;
  } | {
    _type: "our-values-block";
    values: Array<{
      icon?: Icon;
      title?: string;
      description?: string;
      _type: "value";
      _key: string;
    }> | null;
  } | {
    _type: "pricing-card-block";
    title: string | null;
    tagLine: string | null;
    price: {
      value?: number;
      period?: string;
    } | null;
    list: Array<string> | null;
    excerpt: string | null;
    link: Link | null;
  } | {
    _type: "section-header-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    description: string | null;
    link: null;
  } | {
    _type: "seperator-block";
    padding: SectionPadding | null;
  } | {
    _type: "service-grid-block";
    services: Array<{
      _id: string;
      title: string | null;
      slug: Slug | null;
      excerpt: string | null;
      featuredImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | {
      title: string | null;
      link: string | null;
      featuredImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "split-cards-list-block";
    list: Array<{
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
  } | {
    _type: "split-content-block";
    sticky: boolean | null;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    link: Link | null;
  } | {
    _type: "split-image-block";
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
  } | {
    _type: "split-info-list-block";
    list: Array<{
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      tags: Array<string> | null;
    }> | null;
  } | {
    _type: "split-row-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    noGap: boolean | null;
    splitColumns: Array<{
      _type: "split-cards-list-block";
      list: Array<{
        tagLine: string | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }> | null;
    } | {
      _type: "split-content-block";
      sticky: boolean | null;
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      link: Link | null;
    } | {
      _type: "split-image-block";
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
    } | {
      _type: "split-info-list-block";
      list: Array<{
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          alt: string | null;
        } | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
        tags: Array<string> | null;
      }> | null;
    }> | null;
  } | {
    _type: "timeline-row-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    timelines: Array<{
      title: string | null;
      tagLine: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
  } | {
    _type: "two-column-block";
    firstColumn: {
      blockContent: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    } | null;
    secondColumn: {
      blockContent: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    } | null;
  } | {}> | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  navigationSettings: {
    navigationTextColor: "dark" | "white" | null;
  } | null;
  navigationTextColor: null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;

// Source: ./app/(main)/(root)/[slug]/_page-slug-core-utilities/page-slug.route-query.ts
// Variable: GET_PAGE_BY_DEFINED_SLUG_QUERY
// Query: *[_type == "page-slug" && slug.current == $slug][0]{      blocks[]{  // Hero Blocks    _type == "hero-1-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    imagePosition,    links,  },    _type == "hero-2-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },    _type == "hero-3-block" => {    _type,    titleOrange,    titleWhite,    subtitle,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    showOverlay,    "overlayColor": select(            overlayColor == "dark" => "0,0,0",      overlayColor == "light" => "255,255,255",      overlayColor    ),        topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },    _type == "hero-4-block" => {    _type,    title,    description,    showOverlay,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },  // Section/Header Blocks    _type == "section-header-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link,  },    _type == "heading-and-paragraph-centered-block" => {    _type,    heading,    paragraph,  },  // Carousel Blocks    _type == "carousel-1-block" => {    _type,    padding,    colorVariant,    size,    orientation,    indicators,    images[]{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    }  },    _type == "carousel-2-block" => {    _type,    padding,    colorVariant,    testimonial[]->{    _id,    name,    title,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }    },      alt    },  },      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      rating,    },  // Timeline    _type == "timeline-row-block" => {    _type,    padding,    colorVariant,    timelines[]{      title,      tagLine,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },  // Call to Action    _type == "cta-1-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },  // Logo Cloud    _type == "logo-cloud-1-block" => {    _type,    padding,    colorVariant,    title,    images[]{      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },  },  // FAQs    _type == "faqs-block" => {    _type,    noPadding,    faqs[]->{      _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }},        faqsByCategory[]->{      _id,      title,      "faqs": *[_type == "faq" && references(^._id)] {            _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }        }      }  },  // Newsletter    _type == "form-newsletter-block" => {    _type,    padding,    colorVariant,    stackAlign,    consentText,    buttonText,    successMessage,  },  // Split Blocks    _type == "split-row-block" => {    _type,    padding,    colorVariant,    noGap,    splitColumns[]{        _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },        _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },        _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },    },  },    _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },    _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },    _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },    _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },  // Grid Blocks    _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },    _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    _type == "grid-row-block" => {    _type,    padding,    colorVariant,    gridColumns,    columns[]{        _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },        _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },        _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    },  },  // Pricing    _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },  // Service    _type == "service-grid-block" => {    _type,    services[]{      _type == "manualService" => {         title,         link,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      },      _type != "manualService" => @->{         _id,         title,         slug,         excerpt,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      }    },  },  // Cover Map    _type == "cover-map-block" => {    _type,    center,    zoom,    height,    animateIntro,    bearingRotation,    radiusAnimation,    color,  },  // Contact Info    _type == "contact-info-and-form-block" => {    _type,      contactHeading,      contactDescription,      contactEmail,      contactPhone,      contactAddress,      customContactForm{         _type,    formTitle,    formDescription,    submitButtonText,    successMessage,    formFields[] {      fieldType,      fieldName,      fieldLabel,      placeholder,      isRequired,      width,      helpText,      labelOnly,      preChecked,      options[] {        label,        "value": select(value != null && value != "" => value, label)      },      conditionalLogic {        enabled,        controllerFieldName,        action,        controllerValueChecked      }  }    },    },  // Our Values    _type == "our-values-block" => {    _type,    values  },  // Course Slider    _type == "course-slider-block" => {    _type,    title,    sectionId,    courses[]->{      _id,      title,      "slug": slug.current,      featuredImage{            crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }      },      excerpt,    }  },    _type == "hero-5-block" => {    _type,    image{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },  },  // Two Column    _type == "two-column-block" => {    _type,    firstColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    },    secondColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    }  },  // Seperator    _type == "seperator-block" => {    _type,    padding,  }  // ADD VALUE 3 ABOVE},    meta_title,    meta_description,    noindex,    navigationSettings {      navigationTextColor,    },    navigationTextColor,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }  }
export type GET_PAGE_BY_DEFINED_SLUG_QUERYResult = {
  blocks: Array<{
    _type: "carousel-1-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    size: "one" | "three" | "two" | null;
    orientation: null;
    indicators: "count" | "dots" | "none" | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    }> | null;
  } | {
    _type: "carousel-2-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    testimonial: Array<{
      _id: string;
      name: string | null;
      title: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: null;
      } | null;
    }> | null;
    body: null;
    rating: null;
  } | {
    _type: "contact-info-and-form-block";
    contactHeading: string | null;
    contactDescription: string | null;
    contactEmail: string | null;
    contactPhone: string | null;
    contactAddress: string | null;
    customContactForm: {
      _type: "custom-contact-form-block";
      formTitle: string | null;
      formDescription: string | null;
      submitButtonText: string | null;
      successMessage: string | null;
      formFields: Array<{
        fieldType: "checkbox" | "checkboxGroup" | "date" | "datetime" | "email" | "file" | "heading" | "radio" | "select" | "tel" | "text" | "textarea" | null;
        fieldName: string | null;
        fieldLabel: string | null;
        placeholder: string | null;
        isRequired: boolean | null;
        width: "full" | "half" | "quarter" | "remaining" | "third" | null;
        helpText: string | null;
        labelOnly: boolean | null;
        preChecked: boolean | null;
        options: Array<{
          label: string | null;
          value: string | null;
        }> | null;
        conditionalLogic: {
          enabled: boolean | null;
          controllerFieldName: string | null;
          action: "hide" | "show" | null;
          controllerValueChecked: "false" | "true" | null;
        } | null;
      }> | null;
    } | null;
  } | {
    _type: "course-slider-block";
    title: string | null;
    sectionId: string | null;
    courses: Array<{
      _id: string;
      title: string | null;
      slug: string | null;
      featuredImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
      excerpt: string | null;
    }> | null;
  } | {
    _type: "cover-map-block";
    center: Geopoint | null;
    zoom: number | null;
    height: {
      type?: "auto" | "px";
      height?: number;
    } | null;
    animateIntro: {
      enabled?: boolean;
      initialZoom?: number;
      initialPitch?: number;
      duration?: number;
    } | null;
    bearingRotation: {
      enabled?: boolean;
      speed?: number;
      introDelay?: number;
    } | null;
    radiusAnimation: {
      enabled?: boolean;
      duration?: number;
      spawnInterval?: number;
      radius?: number;
      opacity?: {
        startOpacity?: number;
        endOpacity?: number;
      };
      color?: string;
    } | null;
    color: null;
  } | {
    _type: "cta-1-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    links: Array<{
      _key: string;
    } & Link> | null;
  } | {
    _type: "faqs-block";
    noPadding: boolean | null;
    faqs: Array<{
      _id: string;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
    faqsByCategory: Array<{
      _id: string;
      title: string | null;
      faqs: Array<{
        _id: string;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }>;
    }> | null;
  } | {
    _type: "form-newsletter-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    stackAlign: "center" | "left" | null;
    consentText: string | null;
    buttonText: string | null;
    successMessage: string | null;
  } | {
    _type: "grid-card-block";
    title: string | null;
    excerpt: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    link: Link | null;
  } | {
    _type: "grid-post-block";
    title: string | null;
    slug: Slug | null;
    excerpt: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    categories: Array<{
      title: string | null;
    }> | null;
  } | {
    _type: "grid-post-block";
  } | {
    _type: "grid-row-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    gridColumns: "grid-cols-2" | "grid-cols-3" | "grid-cols-4" | null;
    columns: Array<{
      _type: "grid-card-block";
      title: string | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      link: Link | null;
    } | {
      _type: "grid-post-block";
      title: string | null;
      slug: Slug | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      categories: Array<{
        title: string | null;
      }> | null;
    } | {
      _type: "grid-post-block";
    } | {
      _type: "pricing-card-block";
      title: string | null;
      tagLine: string | null;
      price: {
        value?: number;
        period?: string;
      } | null;
      list: Array<string> | null;
      excerpt: string | null;
      link: Link | null;
    }> | null;
  } | {
    _type: "heading-and-paragraph-centered-block";
    heading: string | null;
    paragraph: string | null;
  } | {
    _type: "hero-1-block";
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    imagePosition: "left" | "right" | null;
    links: Array<{
      _key: string;
    } & Link> | null;
  } | {
    _type: "hero-2-block";
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    links: Array<{
      _key: string;
    } & Link> | null;
  } | {
    _type: "hero-3-block";
    titleOrange: string | null;
    titleWhite: string | null;
    subtitle: string | null;
    backgroundImage: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      darkScore: number | NaN;
      asset: {
        _id: string;
        title: string | null;
        altText: string | null;
        description: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            aspectRatio: number | null;
            width: number | null;
            height: number | null;
          } | null;
          palette: {
            dominant: {
              background: string | null;
              foreground: string | null;
              population: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
    showOverlay: boolean | null;
    overlayColor: "0,0,0" | "255,255,255" | "dark" | "light" | null;
    topOverlayStrength: number | null;
    upperCenterOverlayStrength: number | null;
    lowerCenterOverlayStrength: number | null;
    bottomOverlayStrength: number | null;
  } | {
    _type: "hero-4-block";
    title: string | null;
    description: string | null;
    showOverlay: boolean | null;
    backgroundImage: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      darkScore: number | NaN;
      asset: {
        _id: string;
        title: string | null;
        altText: string | null;
        description: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            aspectRatio: number | null;
            width: number | null;
            height: number | null;
          } | null;
          palette: {
            dominant: {
              background: string | null;
              foreground: string | null;
              population: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
    topOverlayStrength: number | null;
    upperCenterOverlayStrength: number | null;
    lowerCenterOverlayStrength: number | null;
    bottomOverlayStrength: number | null;
  } | {
    _type: "hero-5-block";
    image: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      darkScore: number | NaN;
      asset: {
        _id: string;
        title: string | null;
        altText: string | null;
        description: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            aspectRatio: number | null;
            width: number | null;
            height: number | null;
          } | null;
          palette: {
            dominant: {
              background: string | null;
              foreground: string | null;
              population: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | {
    _type: "logo-cloud-1-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    title: string | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    }> | null;
  } | {
    _type: "our-values-block";
    values: Array<{
      icon?: Icon;
      title?: string;
      description?: string;
      _type: "value";
      _key: string;
    }> | null;
  } | {
    _type: "pricing-card-block";
    title: string | null;
    tagLine: string | null;
    price: {
      value?: number;
      period?: string;
    } | null;
    list: Array<string> | null;
    excerpt: string | null;
    link: Link | null;
  } | {
    _type: "section-header-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    description: string | null;
    link: null;
  } | {
    _type: "seperator-block";
    padding: SectionPadding | null;
  } | {
    _type: "service-grid-block";
    services: Array<{
      _id: string;
      title: string | null;
      slug: Slug | null;
      excerpt: string | null;
      featuredImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | {
      title: string | null;
      link: string | null;
      featuredImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "split-cards-list-block";
    list: Array<{
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
  } | {
    _type: "split-content-block";
    sticky: boolean | null;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    link: Link | null;
  } | {
    _type: "split-image-block";
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
  } | {
    _type: "split-info-list-block";
    list: Array<{
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      tags: Array<string> | null;
    }> | null;
  } | {
    _type: "split-row-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    noGap: boolean | null;
    splitColumns: Array<{
      _type: "split-cards-list-block";
      list: Array<{
        tagLine: string | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }> | null;
    } | {
      _type: "split-content-block";
      sticky: boolean | null;
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      link: Link | null;
    } | {
      _type: "split-image-block";
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
    } | {
      _type: "split-info-list-block";
      list: Array<{
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          alt: string | null;
        } | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
        tags: Array<string> | null;
      }> | null;
    }> | null;
  } | {
    _type: "timeline-row-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    timelines: Array<{
      title: string | null;
      tagLine: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
  } | {
    _type: "two-column-block";
    firstColumn: {
      blockContent: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    } | null;
    secondColumn: {
      blockContent: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    } | null;
  } | {}> | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  navigationSettings: {
    navigationTextColor: "dark" | "white" | null;
  } | null;
  navigationTextColor: null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: GET_ALL_PAGES_QUERY
// Query: *[_type == "page-slug" && defined(slug)]{slug}
export type GET_ALL_PAGES_QUERYResult = Array<{
  slug: Slug | null;
}>;

// Source: ./app/(main)/blog/[slug]/_blog-slug-core-utilities/blog-slug.route-query.ts
// Variable: GET_BLOG_PAGES_BY_DEFINED_SLUG_QUERY
// Query: *[_type == "blog-slug" && defined(slug)] | order(_createdAt desc){    title,    slug,    excerpt,}
export type GET_BLOG_PAGES_BY_DEFINED_SLUG_QUERYResult = Array<{
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
}>;
// Variable: GET_ALL_BLOG_PAGES_QUERY
// Query: *[_type == "blog-slug" && defined(slug)]{slug}
export type GET_ALL_BLOG_PAGES_QUERYResult = Array<{
  slug: Slug | null;
}>;
// Variable: GET_BLOG_PAGE_BY_ROUTE_QUERY
// Query: *[_type == "blog-slug" && slug.current == $slug][0]{  title,  slug,  body[]{        ...,    _type == "image" => {      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      }    }  },  _createdAt,  _updatedAt,}
export type GET_BLOG_PAGE_BY_ROUTE_QUERYResult = {
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }> | null;
  _createdAt: string;
  _updatedAt: string;
} | null;

// Source: ./app/(main)/course/[slug]/_course-slug-core-utilities/course-slug.route-query.ts
// Variable: GET_COURSE_PAGE_BY_DEFINED_SLUG_QUERY
// Query: *[_type == "course-slug" && defined(slug)] | order(_createdAt desc){    title,    slug,    excerpt,  }
export type GET_COURSE_PAGE_BY_DEFINED_SLUG_QUERYResult = Array<{
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
}>;
// Variable: GET_ALL_COURSE_PAGES_QUERY
// Query: *[_type == "course-slug" && defined(slug)]{    slug  }
export type GET_ALL_COURSE_PAGES_QUERYResult = Array<{
  slug: Slug | null;
}>;
// Variable: GET_COURSE_PAGE_BY_ROUTE_QUERY
// Query: *[_type == "course-slug" && slug.current == $slug][0]{    title,    slug,    featuredImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    _createdAt,    _updatedAt,  }
export type GET_COURSE_PAGE_BY_ROUTE_QUERYResult = {
  title: string | null;
  slug: Slug | null;
  featuredImage: {
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    darkScore: number | NaN;
    asset: {
      _id: string;
      title: string | null;
      altText: string | null;
      description: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          aspectRatio: number | null;
          width: number | null;
          height: number | null;
        } | null;
        palette: {
          dominant: {
            background: string | null;
            foreground: string | null;
            population: number | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
  _createdAt: string;
  _updatedAt: string;
} | null;

// Source: ./app/(main)/service/[slug]/_service-slug-core-utilities/service-slug.route-query.ts
// Variable: GET_SERVICE_PAGE_BY_DEFINED_SLUG_QUERY
// Query: *[_type == "service-slug" && defined(slug)] | order(_createdAt desc){    title,    slug,    excerpt,    featuredImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },  }
export type GET_SERVICE_PAGE_BY_DEFINED_SLUG_QUERYResult = Array<{
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  featuredImage: {
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    darkScore: number | NaN;
    asset: {
      _id: string;
      title: string | null;
      altText: string | null;
      description: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          aspectRatio: number | null;
          width: number | null;
          height: number | null;
        } | null;
        palette: {
          dominant: {
            background: string | null;
            foreground: string | null;
            population: number | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
}>;
// Variable: GET_ALL_SERVICE_PAGES_QUERY
// Query: *[_type == "service-slug" && defined(slug)]{    slug  }
export type GET_ALL_SERVICE_PAGES_QUERYResult = Array<{
  slug: Slug | null;
}>;
// Variable: GET_SERVICE_PAGE_BY_ROUTE_QUERY
// Query: *[_type == "service-slug" && slug.current == $slug][0]{    title,    customTitle,    slug,    layout,    "headerColor": "dark",    excerpt,    _createdAt,    customContactForm{         _type,    formTitle,    formDescription,    submitButtonText,    successMessage,    formFields[] {      fieldType,      fieldName,      fieldLabel,      placeholder,      isRequired,      width,      helpText,      labelOnly,      preChecked,      options[] {        label,        "value": select(value != null && value != "" => value, label)      },      conditionalLogic {        enabled,        controllerFieldName,        action,        controllerValueChecked      }  }    },    body[]{          ...,    _type == "image" => {      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      }    }    },    _updatedAt,    faqs{       noPadding,      faqs[]->{      _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }},          faqsByCategory[]->{      _id,      title,      "faqs": *[_type == "faq" && references(^._id)] {            _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }        }      }    },    featuredImage{      _type,           crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },  }
export type GET_SERVICE_PAGE_BY_ROUTE_QUERYResult = {
  title: string | null;
  customTitle: string | null;
  slug: Slug | null;
  layout: "form-below" | "side-by-side" | null;
  headerColor: "dark";
  excerpt: string | null;
  _createdAt: string;
  customContactForm: {
    _type: "custom-contact-form-block";
    formTitle: string | null;
    formDescription: string | null;
    submitButtonText: string | null;
    successMessage: string | null;
    formFields: Array<{
      fieldType: "checkbox" | "checkboxGroup" | "date" | "datetime" | "email" | "file" | "heading" | "radio" | "select" | "tel" | "text" | "textarea" | null;
      fieldName: string | null;
      fieldLabel: string | null;
      placeholder: string | null;
      isRequired: boolean | null;
      width: "full" | "half" | "quarter" | "remaining" | "third" | null;
      helpText: string | null;
      labelOnly: boolean | null;
      preChecked: boolean | null;
      options: Array<{
        label: string | null;
        value: string | null;
      }> | null;
      conditionalLogic: {
        enabled: boolean | null;
        controllerFieldName: string | null;
        action: "hide" | "show" | null;
        controllerValueChecked: "false" | "true" | null;
      } | null;
    }> | null;
  } | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }> | null;
  _updatedAt: string;
  faqs: {
    noPadding: boolean | null;
    faqs: Array<{
      _id: string;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
    faqsByCategory: Array<{
      _id: string;
      title: string | null;
      faqs: Array<{
        _id: string;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }>;
    }> | null;
  } | null;
  featuredImage: {
    _type: "image";
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    darkScore: number | NaN;
    asset: {
      _id: string;
      title: string | null;
      altText: string | null;
      description: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          aspectRatio: number | null;
          width: number | null;
          height: number | null;
        } | null;
        palette: {
          dominant: {
            background: string | null;
            foreground: string | null;
            population: number | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;

// Source: ./app/sitemap.ts
// Variable: servicesQuery
// Query: *[_type == "service-slug"] | order(_updatedAt desc) {      "url": $baseUrl + '/service/' + slug.current,      "slug": slug.current,      "lastModified": _updatedAt,      "changeFrequency": 'weekly',      "priority": 0.7    }
export type ServicesQueryResult = Array<{
  url: unknown;
  slug: string | null;
  lastModified: string;
  changeFrequency: "weekly";
  priority: 0.7;
}>;

// Source: ./sanity/desk-organized-sanity-utilities/author/author.document-queries.ts
// Variable: getAuthorReferenceQuery
// Query: author->{    name,    image {      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    }  }
export type GetAuthorReferenceQueryResult = never;

// Source: ./sanity/desk-organized-sanity-utilities/category/category.document-queries.ts
// Variable: getAllCategoriesQuery
// Query: categories[]->{        title,      }
export type GetAllCategoriesQueryResult = never;

// Source: ./sanity/desk-organized-sanity-utilities/faq-category/faq-category.document-queries.ts
// Variable: getAllFaqCategoriesQuery
// Query: faqsByCategory[]->{      _id,      title,      "faqs": *[_type == "faq" && references(^._id)] {            _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }        }      }
export type GetAllFaqCategoriesQueryResult = never;

// Source: ./sanity/desk-organized-sanity-utilities/faq/faq.document-queries.ts
// Variable: getAllReferencedFaqsQuery
// Query: faqs[]->{      _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }}
export type GetAllReferencedFaqsQueryResult = never;

// Source: ./sanity/desk-organized-sanity-utilities/settings/footer-settings/footer-settings.query.ts
// Variable: footerSettingsFetchQuery
// Query: *[_type == "footerSettings"][0] {      blocks[]{  // Hero Blocks    _type == "hero-1-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    imagePosition,    links,  },    _type == "hero-2-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },    _type == "hero-3-block" => {    _type,    titleOrange,    titleWhite,    subtitle,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    showOverlay,    "overlayColor": select(            overlayColor == "dark" => "0,0,0",      overlayColor == "light" => "255,255,255",      overlayColor    ),        topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },    _type == "hero-4-block" => {    _type,    title,    description,    showOverlay,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },  // Section/Header Blocks    _type == "section-header-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link,  },    _type == "heading-and-paragraph-centered-block" => {    _type,    heading,    paragraph,  },  // Carousel Blocks    _type == "carousel-1-block" => {    _type,    padding,    colorVariant,    size,    orientation,    indicators,    images[]{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    }  },    _type == "carousel-2-block" => {    _type,    padding,    colorVariant,    testimonial[]->{    _id,    name,    title,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }    },      alt    },  },      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      rating,    },  // Timeline    _type == "timeline-row-block" => {    _type,    padding,    colorVariant,    timelines[]{      title,      tagLine,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },  // Call to Action    _type == "cta-1-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },  // Logo Cloud    _type == "logo-cloud-1-block" => {    _type,    padding,    colorVariant,    title,    images[]{      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },  },  // FAQs    _type == "faqs-block" => {    _type,    noPadding,    faqs[]->{      _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }},        faqsByCategory[]->{      _id,      title,      "faqs": *[_type == "faq" && references(^._id)] {            _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }        }      }  },  // Newsletter    _type == "form-newsletter-block" => {    _type,    padding,    colorVariant,    stackAlign,    consentText,    buttonText,    successMessage,  },  // Split Blocks    _type == "split-row-block" => {    _type,    padding,    colorVariant,    noGap,    splitColumns[]{        _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },        _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },        _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },    },  },    _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },    _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },    _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },    _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },  // Grid Blocks    _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },    _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    _type == "grid-row-block" => {    _type,    padding,    colorVariant,    gridColumns,    columns[]{        _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },        _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },        _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    },  },  // Pricing    _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },  // Service    _type == "service-grid-block" => {    _type,    services[]{      _type == "manualService" => {         title,         link,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      },      _type != "manualService" => @->{         _id,         title,         slug,         excerpt,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      }    },  },  // Cover Map    _type == "cover-map-block" => {    _type,    center,    zoom,    height,    animateIntro,    bearingRotation,    radiusAnimation,    color,  },  // Contact Info    _type == "contact-info-and-form-block" => {    _type,      contactHeading,      contactDescription,      contactEmail,      contactPhone,      contactAddress,      customContactForm{         _type,    formTitle,    formDescription,    submitButtonText,    successMessage,    formFields[] {      fieldType,      fieldName,      fieldLabel,      placeholder,      isRequired,      width,      helpText,      labelOnly,      preChecked,      options[] {        label,        "value": select(value != null && value != "" => value, label)      },      conditionalLogic {        enabled,        controllerFieldName,        action,        controllerValueChecked      }  }    },    },  // Our Values    _type == "our-values-block" => {    _type,    values  },  // Course Slider    _type == "course-slider-block" => {    _type,    title,    sectionId,    courses[]->{      _id,      title,      "slug": slug.current,      featuredImage{            crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }      },      excerpt,    }  },    _type == "hero-5-block" => {    _type,    image{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },  },  // Two Column    _type == "two-column-block" => {    _type,    firstColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    },    secondColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    }  },  // Seperator    _type == "seperator-block" => {    _type,    padding,  }  // ADD VALUE 3 ABOVE},    ctaText,    infoText,    contactInfo,    socialMediaLinks[] {      platform,      url  }  }
export type FooterSettingsFetchQueryResult = {
  blocks: Array<{
    _type: "carousel-1-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    size: "one" | "three" | "two" | null;
    orientation: null;
    indicators: "count" | "dots" | "none" | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    }> | null;
  } | {
    _type: "carousel-2-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    testimonial: Array<{
      _id: string;
      name: string | null;
      title: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: null;
      } | null;
    }> | null;
    body: null;
    rating: null;
  } | {
    _type: "contact-info-and-form-block";
    contactHeading: string | null;
    contactDescription: string | null;
    contactEmail: string | null;
    contactPhone: string | null;
    contactAddress: string | null;
    customContactForm: {
      _type: "custom-contact-form-block";
      formTitle: string | null;
      formDescription: string | null;
      submitButtonText: string | null;
      successMessage: string | null;
      formFields: Array<{
        fieldType: "checkbox" | "checkboxGroup" | "date" | "datetime" | "email" | "file" | "heading" | "radio" | "select" | "tel" | "text" | "textarea" | null;
        fieldName: string | null;
        fieldLabel: string | null;
        placeholder: string | null;
        isRequired: boolean | null;
        width: "full" | "half" | "quarter" | "remaining" | "third" | null;
        helpText: string | null;
        labelOnly: boolean | null;
        preChecked: boolean | null;
        options: Array<{
          label: string | null;
          value: string | null;
        }> | null;
        conditionalLogic: {
          enabled: boolean | null;
          controllerFieldName: string | null;
          action: "hide" | "show" | null;
          controllerValueChecked: "false" | "true" | null;
        } | null;
      }> | null;
    } | null;
  } | {
    _type: "course-slider-block";
    title: string | null;
    sectionId: string | null;
    courses: Array<{
      _id: string;
      title: string | null;
      slug: string | null;
      featuredImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
      excerpt: string | null;
    }> | null;
  } | {
    _type: "cover-map-block";
    center: Geopoint | null;
    zoom: number | null;
    height: {
      type?: "auto" | "px";
      height?: number;
    } | null;
    animateIntro: {
      enabled?: boolean;
      initialZoom?: number;
      initialPitch?: number;
      duration?: number;
    } | null;
    bearingRotation: {
      enabled?: boolean;
      speed?: number;
      introDelay?: number;
    } | null;
    radiusAnimation: {
      enabled?: boolean;
      duration?: number;
      spawnInterval?: number;
      radius?: number;
      opacity?: {
        startOpacity?: number;
        endOpacity?: number;
      };
      color?: string;
    } | null;
    color: null;
  } | {
    _type: "cta-1-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    links: Array<{
      _key: string;
    } & Link> | null;
  } | {
    _type: "faqs-block";
    noPadding: boolean | null;
    faqs: Array<{
      _id: string;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
    faqsByCategory: Array<{
      _id: string;
      title: string | null;
      faqs: Array<{
        _id: string;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }>;
    }> | null;
  } | {
    _type: "form-newsletter-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    stackAlign: "center" | "left" | null;
    consentText: string | null;
    buttonText: string | null;
    successMessage: string | null;
  } | {
    _type: "grid-card-block";
    title: string | null;
    excerpt: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    link: Link | null;
  } | {
    _type: "grid-post-block";
    title: string | null;
    slug: Slug | null;
    excerpt: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    categories: Array<{
      title: string | null;
    }> | null;
  } | {
    _type: "grid-post-block";
  } | {
    _type: "grid-row-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    gridColumns: "grid-cols-2" | "grid-cols-3" | "grid-cols-4" | null;
    columns: Array<{
      _type: "grid-card-block";
      title: string | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      link: Link | null;
    } | {
      _type: "grid-post-block";
      title: string | null;
      slug: Slug | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      categories: Array<{
        title: string | null;
      }> | null;
    } | {
      _type: "grid-post-block";
    } | {
      _type: "pricing-card-block";
      title: string | null;
      tagLine: string | null;
      price: {
        value?: number;
        period?: string;
      } | null;
      list: Array<string> | null;
      excerpt: string | null;
      link: Link | null;
    }> | null;
  } | {
    _type: "heading-and-paragraph-centered-block";
    heading: string | null;
    paragraph: string | null;
  } | {
    _type: "hero-1-block";
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    imagePosition: "left" | "right" | null;
    links: Array<{
      _key: string;
    } & Link> | null;
  } | {
    _type: "hero-2-block";
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    links: Array<{
      _key: string;
    } & Link> | null;
  } | {
    _type: "hero-3-block";
    titleOrange: string | null;
    titleWhite: string | null;
    subtitle: string | null;
    backgroundImage: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      darkScore: number | NaN;
      asset: {
        _id: string;
        title: string | null;
        altText: string | null;
        description: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            aspectRatio: number | null;
            width: number | null;
            height: number | null;
          } | null;
          palette: {
            dominant: {
              background: string | null;
              foreground: string | null;
              population: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
    showOverlay: boolean | null;
    overlayColor: "0,0,0" | "255,255,255" | "dark" | "light" | null;
    topOverlayStrength: number | null;
    upperCenterOverlayStrength: number | null;
    lowerCenterOverlayStrength: number | null;
    bottomOverlayStrength: number | null;
  } | {
    _type: "hero-4-block";
    title: string | null;
    description: string | null;
    showOverlay: boolean | null;
    backgroundImage: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      darkScore: number | NaN;
      asset: {
        _id: string;
        title: string | null;
        altText: string | null;
        description: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            aspectRatio: number | null;
            width: number | null;
            height: number | null;
          } | null;
          palette: {
            dominant: {
              background: string | null;
              foreground: string | null;
              population: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
    topOverlayStrength: number | null;
    upperCenterOverlayStrength: number | null;
    lowerCenterOverlayStrength: number | null;
    bottomOverlayStrength: number | null;
  } | {
    _type: "hero-5-block";
    image: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      darkScore: number | NaN;
      asset: {
        _id: string;
        title: string | null;
        altText: string | null;
        description: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            aspectRatio: number | null;
            width: number | null;
            height: number | null;
          } | null;
          palette: {
            dominant: {
              background: string | null;
              foreground: string | null;
              population: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | {
    _type: "logo-cloud-1-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    title: string | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    }> | null;
  } | {
    _type: "our-values-block";
    values: Array<{
      icon?: Icon;
      title?: string;
      description?: string;
      _type: "value";
      _key: string;
    }> | null;
  } | {
    _type: "pricing-card-block";
    title: string | null;
    tagLine: string | null;
    price: {
      value?: number;
      period?: string;
    } | null;
    list: Array<string> | null;
    excerpt: string | null;
    link: Link | null;
  } | {
    _type: "section-header-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    description: string | null;
    link: null;
  } | {
    _type: "seperator-block";
    padding: SectionPadding | null;
  } | {
    _type: "service-grid-block";
    services: Array<{
      _id: string;
      title: string | null;
      slug: Slug | null;
      excerpt: string | null;
      featuredImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | {
      title: string | null;
      link: string | null;
      featuredImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "split-cards-list-block";
    list: Array<{
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
  } | {
    _type: "split-content-block";
    sticky: boolean | null;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    } | {
      videoId?: string;
      _type: "youtube";
      _key: string;
    }> | null;
    link: Link | null;
  } | {
    _type: "split-image-block";
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
  } | {
    _type: "split-info-list-block";
    list: Array<{
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      tags: Array<string> | null;
    }> | null;
  } | {
    _type: "split-row-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    noGap: boolean | null;
    splitColumns: Array<{
      _type: "split-cards-list-block";
      list: Array<{
        tagLine: string | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }> | null;
    } | {
      _type: "split-content-block";
      sticky: boolean | null;
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      link: Link | null;
    } | {
      _type: "split-image-block";
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
    } | {
      _type: "split-info-list-block";
      list: Array<{
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          alt: string | null;
        } | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
        tags: Array<string> | null;
      }> | null;
    }> | null;
  } | {
    _type: "timeline-row-block";
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    timelines: Array<{
      title: string | null;
      tagLine: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    }> | null;
  } | {
    _type: "two-column-block";
    firstColumn: {
      blockContent: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    } | null;
    secondColumn: {
      blockContent: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
    } | null;
  } | {}> | null;
  ctaText: string | null;
  infoText: string | null;
  contactInfo: string | null;
  socialMediaLinks: Array<{
    platform: string | null;
    url: string | null;
  }> | null;
} | null;

// Source: ./sanity/desk-organized-sanity-utilities/settings/header-settings/header-settings.query.ts
// Variable: headerSettingsFetchQuery
// Query: *[_type == "headerSettings"][0] {      enableTopBar,    topBar {      justifyContent,      items[] {          "_ts": "LinksQuery",  _key,  _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},  _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},  _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle},  _type == "dropdownGroup" => {  "_ts": "DropdownGroupQuery",  "linkType": "dropdownGroup",  title,  icon,  hideOnMobile,  links[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle}  }},  _type == "linkGroup" => {  "_ts": "LinkGroupQuery",  "linkType": "linkGroup",  title,  icon,  hideOnMobile,  items[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle},    _type == "dropdownGroup" => {  "_ts": "DropdownGroupQuery",  "linkType": "dropdownGroup",  title,  icon,  hideOnMobile,  links[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle}  }}  }},        icon,        hideOnMobile,        linkStyle      }    },    logoOptions,    "logo": select(        logoOptions.logoType == "svgloop" => logoOptions.svgloopLogo,        logoOptions.logoType == "lightAndDark" => logoOptions.lightAndDarkLogo {            lightLogo,            darkLogo        },        logoOptions.logoType == "default" => logoOptions.defaultLogo    ),    navigationConfig {      justifyContent    },    navigationItems[] {          "_ts": "LinksQuery",  _key,  _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},  _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},  _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle},  _type == "dropdownGroup" => {  "_ts": "DropdownGroupQuery",  "linkType": "dropdownGroup",  title,  icon,  hideOnMobile,  links[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle}  }},  _type == "linkGroup" => {  "_ts": "LinkGroupQuery",  "linkType": "linkGroup",  title,  icon,  hideOnMobile,  items[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle},    _type == "dropdownGroup" => {  "_ts": "DropdownGroupQuery",  "linkType": "dropdownGroup",  title,  icon,  hideOnMobile,  links[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle}  }}  }}    }  }
export type HeaderSettingsFetchQueryResult = {
  enableTopBar: boolean | null;
  topBar: {
    justifyContent: "justify-around" | "justify-between" | "justify-center" | "justify-end" | "justify-evenly" | "justify-start" | null;
    items: Array<{
      _ts: "ExternalLinkQuery";
      _key: string;
      linkType: "external";
      title: string | null;
      url: string | null;
      description: null;
      icon: Icon | null;
      hideOnMobile: boolean | null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "blog-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: boolean | null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "course-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: boolean | null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "page-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: boolean | null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "service-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: boolean | null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      description: null;
      icon: Icon | null;
      hideOnMobile: boolean | null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "LinkGroupQuery";
      _key: string;
      linkType: "linkGroup";
      title: string | null;
      icon: Icon | null;
      hideOnMobile: boolean | null;
      items: Array<{
        _key: string;
        _ts: "DownloadLinkQuery";
        linkType: "download";
        title: string | null;
        url: string | null;
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "DropdownGroupQuery";
        linkType: "dropdownGroup";
        title: string | null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        links: Array<{
          _key: string;
          _ts: "DownloadLinkQuery";
          linkType: "download";
          title: string | null;
          url: string | null;
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "ExternalLinkQuery";
          linkType: "external";
          title: string | null;
          url: string | null;
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "blog-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "course-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "page-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "service-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        }> | null;
      } | {
        _key: string;
        _ts: "ExternalLinkQuery";
        linkType: "external";
        title: string | null;
        url: string | null;
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "blog-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "course-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "page-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "service-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      }> | null;
      linkStyle: null;
    }> | null;
  } | null;
  logoOptions: {
    logoType?: "default" | "lightAndDark" | "svgloop";
    svgloopLogo?: string;
    defaultLogo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    lightAndDarkLogo?: {
      logoType?: "image" | "svg";
      lightLogo?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      darkLogo?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
    };
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null | {
    lightLogo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    darkLogo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | string;
  navigationConfig: {
    justifyContent: "justify-around" | "justify-between" | "justify-center" | "justify-end" | "justify-evenly" | "justify-start" | null;
  } | null;
  navigationItems: Array<{
    _ts: "DropdownGroupQuery";
    _key: string;
    linkType: "dropdownGroup";
    title: string | null;
    icon: null;
    hideOnMobile: null;
    links: Array<{
      _key: string;
      _ts: "DownloadLinkQuery";
      linkType: "download";
      title: string | null;
      url: string | null;
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "ExternalLinkQuery";
      linkType: "external";
      title: string | null;
      url: string | null;
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "blog-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "course-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "page-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "service-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    }> | null;
  } | {
    _ts: "ExternalLinkQuery";
    _key: string;
    linkType: "external";
    title: string | null;
    url: string | null;
    description: null;
    icon: Icon | null;
    hideOnMobile: null;
    linkStyle: "button" | "default" | null;
  } | {
    _ts: "InternalLinkQuery";
    _key: string;
    linkType: "internal";
    title: string | null;
    slug: string | null;
    _type: "blog-slug";
    description: null;
    icon: Icon | null;
    hideOnMobile: null;
    linkStyle: "button" | "default" | null;
  } | {
    _ts: "InternalLinkQuery";
    _key: string;
    linkType: "internal";
    title: string | null;
    slug: string | null;
    _type: "course-slug";
    description: null;
    icon: Icon | null;
    hideOnMobile: null;
    linkStyle: "button" | "default" | null;
  } | {
    _ts: "InternalLinkQuery";
    _key: string;
    linkType: "internal";
    title: string | null;
    slug: string | null;
    _type: "page-slug";
    description: null;
    icon: Icon | null;
    hideOnMobile: null;
    linkStyle: "button" | "default" | null;
  } | {
    _ts: "InternalLinkQuery";
    _key: string;
    linkType: "internal";
    title: string | null;
    slug: string | null;
    _type: "service-slug";
    description: null;
    icon: Icon | null;
    hideOnMobile: null;
    linkStyle: "button" | "default" | null;
  } | {
    _ts: "InternalLinkQuery";
    _key: string;
    linkType: "internal";
    description: null;
    icon: Icon | null;
    hideOnMobile: null;
    linkStyle: "button" | "default" | null;
  } | {
    _ts: "LinkGroupQuery";
    _key: string;
    linkType: "linkGroup";
    title: string | null;
    icon: null;
    hideOnMobile: null;
    items: Array<{
      _key: string;
      _ts: "DownloadLinkQuery";
      linkType: "download";
      title: string | null;
      url: string | null;
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "DropdownGroupQuery";
      linkType: "dropdownGroup";
      title: string | null;
      icon: null;
      hideOnMobile: null;
      links: Array<{
        _key: string;
        _ts: "DownloadLinkQuery";
        linkType: "download";
        title: string | null;
        url: string | null;
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "ExternalLinkQuery";
        linkType: "external";
        title: string | null;
        url: string | null;
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "blog-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "course-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "page-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "service-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      }> | null;
    } | {
      _key: string;
      _ts: "ExternalLinkQuery";
      linkType: "external";
      title: string | null;
      url: string | null;
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "blog-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "course-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "page-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "service-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _key: string;
      _ts: "InternalLinkQuery";
      linkType: "internal";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    }> | null;
  }> | null;
} | null;

// Source: ./sanity/desk-organized-sanity-utilities/settings/metadata-settings/metadata-settings.query.ts
// Variable: metadataSettingsFetchQuery
// Query: *[_type == "metadataSettings"][0] {      "metadata": {    "_ts": "MetadataQuery",    "title": coalesce(metadata.title, title, name),    "desc": coalesce(metadata.desc, excerpt),    "image": select(      defined(metadata.image.asset._ref) => metadata.image {          "id": asset._ref,  altText      },      defined(image.asset._ref) => image {          "id": asset._ref,  altText      },      defined(coverImage.asset._ref) => coverImage {          "id": asset._ref,  altText      },      defined(hero.image.asset._ref) => hero.image {          "id": asset._ref,  altText      }    ),    "tags": metadata.tags,    "noIndex": metadata.noIndex  }  }
export type MetadataSettingsFetchQueryResult = {
  metadata: {
    _ts: "MetadataQuery";
    title: string | null;
    desc: string | null;
    image: {
      id: string | null;
      altText: null;
    } | null;
    tags: null;
    noIndex: null;
  };
} | null;

// Source: ./sanity/desk-organized-sanity-utilities/settings/route-404-settings/route-404-settings.query.ts
// Variable: route404SettingsFetchQuery
// Query: *[_type == "route404Settings"][0] {      title,    subtitle,    buttonText,    buttonLink,    backgroundImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      }    },    blocks[] {      blocks[]{  // Hero Blocks    _type == "hero-1-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    imagePosition,    links,  },    _type == "hero-2-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },    _type == "hero-3-block" => {    _type,    titleOrange,    titleWhite,    subtitle,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    showOverlay,    "overlayColor": select(            overlayColor == "dark" => "0,0,0",      overlayColor == "light" => "255,255,255",      overlayColor    ),        topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },    _type == "hero-4-block" => {    _type,    title,    description,    showOverlay,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },  // Section/Header Blocks    _type == "section-header-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link,  },    _type == "heading-and-paragraph-centered-block" => {    _type,    heading,    paragraph,  },  // Carousel Blocks    _type == "carousel-1-block" => {    _type,    padding,    colorVariant,    size,    orientation,    indicators,    images[]{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    }  },    _type == "carousel-2-block" => {    _type,    padding,    colorVariant,    testimonial[]->{    _id,    name,    title,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }    },      alt    },  },      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      rating,    },  // Timeline    _type == "timeline-row-block" => {    _type,    padding,    colorVariant,    timelines[]{      title,      tagLine,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },  // Call to Action    _type == "cta-1-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },  // Logo Cloud    _type == "logo-cloud-1-block" => {    _type,    padding,    colorVariant,    title,    images[]{      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },  },  // FAQs    _type == "faqs-block" => {    _type,    noPadding,    faqs[]->{      _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }},        faqsByCategory[]->{      _id,      title,      "faqs": *[_type == "faq" && references(^._id)] {            _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }        }      }  },  // Newsletter    _type == "form-newsletter-block" => {    _type,    padding,    colorVariant,    stackAlign,    consentText,    buttonText,    successMessage,  },  // Split Blocks    _type == "split-row-block" => {    _type,    padding,    colorVariant,    noGap,    splitColumns[]{        _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },        _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },        _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },    },  },    _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },    _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },    _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },    _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },  // Grid Blocks    _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },    _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    _type == "grid-row-block" => {    _type,    padding,    colorVariant,    gridColumns,    columns[]{        _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },        _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },        _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    },  },  // Pricing    _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },  // Service    _type == "service-grid-block" => {    _type,    services[]{      _type == "manualService" => {         title,         link,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      },      _type != "manualService" => @->{         _id,         title,         slug,         excerpt,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      }    },  },  // Cover Map    _type == "cover-map-block" => {    _type,    center,    zoom,    height,    animateIntro,    bearingRotation,    radiusAnimation,    color,  },  // Contact Info    _type == "contact-info-and-form-block" => {    _type,      contactHeading,      contactDescription,      contactEmail,      contactPhone,      contactAddress,      customContactForm{         _type,    formTitle,    formDescription,    submitButtonText,    successMessage,    formFields[] {      fieldType,      fieldName,      fieldLabel,      placeholder,      isRequired,      width,      helpText,      labelOnly,      preChecked,      options[] {        label,        "value": select(value != null && value != "" => value, label)      },      conditionalLogic {        enabled,        controllerFieldName,        action,        controllerValueChecked      }  }    },    },  // Our Values    _type == "our-values-block" => {    _type,    values  },  // Course Slider    _type == "course-slider-block" => {    _type,    title,    sectionId,    courses[]->{      _id,      title,      "slug": slug.current,      featuredImage{            crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }      },      excerpt,    }  },    _type == "hero-5-block" => {    _type,    image{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },  },  // Two Column    _type == "two-column-block" => {    _type,    firstColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    },    secondColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    }  },  // Seperator    _type == "seperator-block" => {    _type,    padding,  }  // ADD VALUE 3 ABOVE}    },    meta_title,    meta_description  }
export type Route404SettingsFetchQueryResult = {
  title: string | null;
  subtitle: string | null;
  buttonText: string | null;
  buttonLink: string | null;
  backgroundImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
  blocks: Array<{
    blocks: null;
  }> | null;
  meta_title: string | null;
  meta_description: string | null;
} | null;

// Source: ./sanity/desk-organized-sanity-utilities/settings/settings.query.ts
// Variable: settingsQuery
// Query: {  "siteSettings":   *[_type == "siteSettings"][0] {    privacyPolicyPage-> {      "slug": slug.current,      title    },  },  "headerSettings":   *[_type == "headerSettings"][0] {      enableTopBar,    topBar {      justifyContent,      items[] {          "_ts": "LinksQuery",  _key,  _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},  _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},  _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle},  _type == "dropdownGroup" => {  "_ts": "DropdownGroupQuery",  "linkType": "dropdownGroup",  title,  icon,  hideOnMobile,  links[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle}  }},  _type == "linkGroup" => {  "_ts": "LinkGroupQuery",  "linkType": "linkGroup",  title,  icon,  hideOnMobile,  items[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle},    _type == "dropdownGroup" => {  "_ts": "DropdownGroupQuery",  "linkType": "dropdownGroup",  title,  icon,  hideOnMobile,  links[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle}  }}  }},        icon,        hideOnMobile,        linkStyle      }    },    logoOptions,    "logo": select(        logoOptions.logoType == "svgloop" => logoOptions.svgloopLogo,        logoOptions.logoType == "lightAndDark" => logoOptions.lightAndDarkLogo {            lightLogo,            darkLogo        },        logoOptions.logoType == "default" => logoOptions.defaultLogo    ),    navigationConfig {      justifyContent    },    navigationItems[] {          "_ts": "LinksQuery",  _key,  _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},  _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},  _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle},  _type == "dropdownGroup" => {  "_ts": "DropdownGroupQuery",  "linkType": "dropdownGroup",  title,  icon,  hideOnMobile,  links[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle}  }},  _type == "linkGroup" => {  "_ts": "LinkGroupQuery",  "linkType": "linkGroup",  title,  icon,  hideOnMobile,  items[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle},    _type == "dropdownGroup" => {  "_ts": "DropdownGroupQuery",  "linkType": "dropdownGroup",  title,  icon,  hideOnMobile,  links[] {    _key,    _type == "internalLinkObject" => {  "_ts": "InternalLinkQuery",  "linkType": "internal",  ...(internalLink-> {    "title": coalesce(      ^.customTitle,      title,      name    ),    "slug": slug.current,    _type  }),  description,  icon,  hideOnMobile,  linkStyle},    _type == "link" => {  "_ts": "ExternalLinkQuery",  "linkType": "external",  "title": coalesce(    customTitle,    href  ),  "url": href,  description,  icon,  hideOnMobile,  linkStyle},    _type == "downloadLinkObject" => {  "_ts": "DownloadLinkQuery",  "linkType": "download",  "title": coalesce(      customTitle,      file.asset->originalFilename    ),  "url": file.asset->url,  description,  icon,  hideOnMobile,  linkStyle}  }}  }}    }  },  "footerSettings":   *[_type == "footerSettings"][0] {      blocks[]{  // Hero Blocks    _type == "hero-1-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    imagePosition,    links,  },    _type == "hero-2-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },    _type == "hero-3-block" => {    _type,    titleOrange,    titleWhite,    subtitle,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    showOverlay,    "overlayColor": select(            overlayColor == "dark" => "0,0,0",      overlayColor == "light" => "255,255,255",      overlayColor    ),        topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },    _type == "hero-4-block" => {    _type,    title,    description,    showOverlay,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },  // Section/Header Blocks    _type == "section-header-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link,  },    _type == "heading-and-paragraph-centered-block" => {    _type,    heading,    paragraph,  },  // Carousel Blocks    _type == "carousel-1-block" => {    _type,    padding,    colorVariant,    size,    orientation,    indicators,    images[]{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    }  },    _type == "carousel-2-block" => {    _type,    padding,    colorVariant,    testimonial[]->{    _id,    name,    title,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }    },      alt    },  },      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      rating,    },  // Timeline    _type == "timeline-row-block" => {    _type,    padding,    colorVariant,    timelines[]{      title,      tagLine,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },  // Call to Action    _type == "cta-1-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },  // Logo Cloud    _type == "logo-cloud-1-block" => {    _type,    padding,    colorVariant,    title,    images[]{      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },  },  // FAQs    _type == "faqs-block" => {    _type,    noPadding,    faqs[]->{      _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }},        faqsByCategory[]->{      _id,      title,      "faqs": *[_type == "faq" && references(^._id)] {            _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }        }      }  },  // Newsletter    _type == "form-newsletter-block" => {    _type,    padding,    colorVariant,    stackAlign,    consentText,    buttonText,    successMessage,  },  // Split Blocks    _type == "split-row-block" => {    _type,    padding,    colorVariant,    noGap,    splitColumns[]{        _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },        _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },        _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },    },  },    _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },    _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },    _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },    _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },  // Grid Blocks    _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },    _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    _type == "grid-row-block" => {    _type,    padding,    colorVariant,    gridColumns,    columns[]{        _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },        _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },        _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    },  },  // Pricing    _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },  // Service    _type == "service-grid-block" => {    _type,    services[]{      _type == "manualService" => {         title,         link,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      },      _type != "manualService" => @->{         _id,         title,         slug,         excerpt,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      }    },  },  // Cover Map    _type == "cover-map-block" => {    _type,    center,    zoom,    height,    animateIntro,    bearingRotation,    radiusAnimation,    color,  },  // Contact Info    _type == "contact-info-and-form-block" => {    _type,      contactHeading,      contactDescription,      contactEmail,      contactPhone,      contactAddress,      customContactForm{         _type,    formTitle,    formDescription,    submitButtonText,    successMessage,    formFields[] {      fieldType,      fieldName,      fieldLabel,      placeholder,      isRequired,      width,      helpText,      labelOnly,      preChecked,      options[] {        label,        "value": select(value != null && value != "" => value, label)      },      conditionalLogic {        enabled,        controllerFieldName,        action,        controllerValueChecked      }  }    },    },  // Our Values    _type == "our-values-block" => {    _type,    values  },  // Course Slider    _type == "course-slider-block" => {    _type,    title,    sectionId,    courses[]->{      _id,      title,      "slug": slug.current,      featuredImage{            crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }      },      excerpt,    }  },    _type == "hero-5-block" => {    _type,    image{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },  },  // Two Column    _type == "two-column-block" => {    _type,    firstColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    },    secondColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    }  },  // Seperator    _type == "seperator-block" => {    _type,    padding,  }  // ADD VALUE 3 ABOVE},    ctaText,    infoText,    contactInfo,    socialMediaLinks[] {      platform,      url  }  },  "metadataSettings":   *[_type == "metadataSettings"][0] {      "metadata": {    "_ts": "MetadataQuery",    "title": coalesce(metadata.title, title, name),    "desc": coalesce(metadata.desc, excerpt),    "image": select(      defined(metadata.image.asset._ref) => metadata.image {          "id": asset._ref,  altText      },      defined(image.asset._ref) => image {          "id": asset._ref,  altText      },      defined(coverImage.asset._ref) => coverImage {          "id": asset._ref,  altText      },      defined(hero.image.asset._ref) => hero.image {          "id": asset._ref,  altText      }    ),    "tags": metadata.tags,    "noIndex": metadata.noIndex  }  },  "route404Settings":   *[_type == "route404Settings"][0] {      title,    subtitle,    buttonText,    buttonLink,    backgroundImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      }    },    blocks[] {      blocks[]{  // Hero Blocks    _type == "hero-1-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    imagePosition,    links,  },    _type == "hero-2-block" => {    _type,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },    _type == "hero-3-block" => {    _type,    titleOrange,    titleWhite,    subtitle,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    showOverlay,    "overlayColor": select(            overlayColor == "dark" => "0,0,0",      overlayColor == "light" => "255,255,255",      overlayColor    ),        topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },    _type == "hero-4-block" => {    _type,    title,    description,    showOverlay,    backgroundImage{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },    topOverlayStrength,    upperCenterOverlayStrength,    lowerCenterOverlayStrength,    bottomOverlayStrength,  },  // Section/Header Blocks    _type == "section-header-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link,  },    _type == "heading-and-paragraph-centered-block" => {    _type,    heading,    paragraph,  },  // Carousel Blocks    _type == "carousel-1-block" => {    _type,    padding,    colorVariant,    size,    orientation,    indicators,    images[]{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    }  },    _type == "carousel-2-block" => {    _type,    padding,    colorVariant,    testimonial[]->{    _id,    name,    title,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }    },      alt    },  },      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      rating,    },  // Timeline    _type == "timeline-row-block" => {    _type,    padding,    colorVariant,    timelines[]{      title,      tagLine,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },  // Call to Action    _type == "cta-1-block" => {    _type,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },  // Logo Cloud    _type == "logo-cloud-1-block" => {    _type,    padding,    colorVariant,    title,    images[]{      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },  },  // FAQs    _type == "faqs-block" => {    _type,    noPadding,    faqs[]->{      _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }},        faqsByCategory[]->{      _id,      title,      "faqs": *[_type == "faq" && references(^._id)] {            _id,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    }        }      }  },  // Newsletter    _type == "form-newsletter-block" => {    _type,    padding,    colorVariant,    stackAlign,    consentText,    buttonText,    successMessage,  },  // Split Blocks    _type == "split-row-block" => {    _type,    padding,    colorVariant,    noGap,    splitColumns[]{        _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },        _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },        _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },    },  },    _type == "split-content-block" => {    _type,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },    _type == "split-cards-list-block" => {    _type,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },    _type == "split-image-block" => {    _type,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },    _type == "split-info-list-block" => {    _type,    list[]{      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },  // Grid Blocks    _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },    _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    _type == "grid-row-block" => {    _type,    padding,    colorVariant,    gridColumns,    columns[]{        _type == "grid-card-block" => {    _type,    title,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },        _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },        _type == "grid-post-block" => {    _type,    ...post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        title,      },    },  },    },  },  // Pricing    _type == "pricing-card-block" => {    _type,    title,    tagLine,    price,    list[],    excerpt,    link,  },  // Service    _type == "service-grid-block" => {    _type,    services[]{      _type == "manualService" => {         title,         link,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      },      _type != "manualService" => @->{         _id,         title,         slug,         excerpt,         featuredImage{               crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }         }      }    },  },  // Cover Map    _type == "cover-map-block" => {    _type,    center,    zoom,    height,    animateIntro,    bearingRotation,    radiusAnimation,    color,  },  // Contact Info    _type == "contact-info-and-form-block" => {    _type,      contactHeading,      contactDescription,      contactEmail,      contactPhone,      contactAddress,      customContactForm{         _type,    formTitle,    formDescription,    submitButtonText,    successMessage,    formFields[] {      fieldType,      fieldName,      fieldLabel,      placeholder,      isRequired,      width,      helpText,      labelOnly,      preChecked,      options[] {        label,        "value": select(value != null && value != "" => value, label)      },      conditionalLogic {        enabled,        controllerFieldName,        action,        controllerValueChecked      }  }    },    },  // Our Values    _type == "our-values-block" => {    _type,    values  },  // Course Slider    _type == "course-slider-block" => {    _type,    title,    sectionId,    courses[]->{      _id,      title,      "slug": slug.current,      featuredImage{            crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }      },      excerpt,    }  },    _type == "hero-5-block" => {    _type,    image{          crop,  hotspot,  "darkScore": (    (coalesce(asset->metadata.palette.darkVibrant.population, 0)     + coalesce(asset->metadata.palette.darkMuted.population, 0))    /    (      coalesce(asset->metadata.palette.darkVibrant.population, 0)      + coalesce(asset->metadata.palette.darkMuted.population, 0)      + coalesce(asset->metadata.palette.dominant.population, 0)      + coalesce(asset->metadata.palette.lightVibrant.population, 0)      + coalesce(asset->metadata.palette.lightMuted.population, 0)      + coalesce(asset->metadata.palette.muted.population, 0)    )  ),  asset->{    _id,    title,    altText,    description,    metadata {      lqip,      dimensions {        aspectRatio,        width,        height      },      palette {        dominant {          background,          foreground,          population        }      }    }  }    },  },  // Two Column    _type == "two-column-block" => {    _type,    firstColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    },    secondColumn {      blockContent[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    }  },  // Seperator    _type == "seperator-block" => {    _type,    padding,  }  // ADD VALUE 3 ABOVE}    },    meta_title,    meta_description  },  // ADD VALUE 3 ABOVE}
export type SettingsQueryResult = {
  siteSettings: {
    privacyPolicyPage: {
      slug: string | null;
      title: string | null;
    } | null;
  } | null;
  headerSettings: {
    enableTopBar: boolean | null;
    topBar: {
      justifyContent: "justify-around" | "justify-between" | "justify-center" | "justify-end" | "justify-evenly" | "justify-start" | null;
      items: Array<{
        _ts: "ExternalLinkQuery";
        _key: string;
        linkType: "external";
        title: string | null;
        url: string | null;
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _ts: "InternalLinkQuery";
        _key: string;
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "blog-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _ts: "InternalLinkQuery";
        _key: string;
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "course-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _ts: "InternalLinkQuery";
        _key: string;
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "page-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _ts: "InternalLinkQuery";
        _key: string;
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "service-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _ts: "InternalLinkQuery";
        _key: string;
        linkType: "internal";
        description: null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        linkStyle: "button" | "default" | null;
      } | {
        _ts: "LinkGroupQuery";
        _key: string;
        linkType: "linkGroup";
        title: string | null;
        icon: Icon | null;
        hideOnMobile: boolean | null;
        items: Array<{
          _key: string;
          _ts: "DownloadLinkQuery";
          linkType: "download";
          title: string | null;
          url: string | null;
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "DropdownGroupQuery";
          linkType: "dropdownGroup";
          title: string | null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          links: Array<{
            _key: string;
            _ts: "DownloadLinkQuery";
            linkType: "download";
            title: string | null;
            url: string | null;
            description: null;
            icon: Icon | null;
            hideOnMobile: boolean | null;
            linkStyle: "button" | "default" | null;
          } | {
            _key: string;
            _ts: "ExternalLinkQuery";
            linkType: "external";
            title: string | null;
            url: string | null;
            description: null;
            icon: Icon | null;
            hideOnMobile: boolean | null;
            linkStyle: "button" | "default" | null;
          } | {
            _key: string;
            _ts: "InternalLinkQuery";
            linkType: "internal";
            title: string | null;
            slug: string | null;
            _type: "blog-slug";
            description: null;
            icon: Icon | null;
            hideOnMobile: boolean | null;
            linkStyle: "button" | "default" | null;
          } | {
            _key: string;
            _ts: "InternalLinkQuery";
            linkType: "internal";
            title: string | null;
            slug: string | null;
            _type: "course-slug";
            description: null;
            icon: Icon | null;
            hideOnMobile: boolean | null;
            linkStyle: "button" | "default" | null;
          } | {
            _key: string;
            _ts: "InternalLinkQuery";
            linkType: "internal";
            title: string | null;
            slug: string | null;
            _type: "page-slug";
            description: null;
            icon: Icon | null;
            hideOnMobile: boolean | null;
            linkStyle: "button" | "default" | null;
          } | {
            _key: string;
            _ts: "InternalLinkQuery";
            linkType: "internal";
            title: string | null;
            slug: string | null;
            _type: "service-slug";
            description: null;
            icon: Icon | null;
            hideOnMobile: boolean | null;
            linkStyle: "button" | "default" | null;
          } | {
            _key: string;
            _ts: "InternalLinkQuery";
            linkType: "internal";
            description: null;
            icon: Icon | null;
            hideOnMobile: boolean | null;
            linkStyle: "button" | "default" | null;
          }> | null;
        } | {
          _key: string;
          _ts: "ExternalLinkQuery";
          linkType: "external";
          title: string | null;
          url: string | null;
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "blog-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "course-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "page-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "service-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          description: null;
          icon: Icon | null;
          hideOnMobile: boolean | null;
          linkStyle: "button" | "default" | null;
        }> | null;
        linkStyle: null;
      }> | null;
    } | null;
    logoOptions: {
      logoType?: "default" | "lightAndDark" | "svgloop";
      svgloopLogo?: string;
      defaultLogo?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      lightAndDarkLogo?: {
        logoType?: "image" | "svg";
        lightLogo?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        };
        darkLogo?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        };
      };
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null | {
      lightLogo: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      darkLogo: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
    } | string;
    navigationConfig: {
      justifyContent: "justify-around" | "justify-between" | "justify-center" | "justify-end" | "justify-evenly" | "justify-start" | null;
    } | null;
    navigationItems: Array<{
      _ts: "DropdownGroupQuery";
      _key: string;
      linkType: "dropdownGroup";
      title: string | null;
      icon: null;
      hideOnMobile: null;
      links: Array<{
        _key: string;
        _ts: "DownloadLinkQuery";
        linkType: "download";
        title: string | null;
        url: string | null;
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "ExternalLinkQuery";
        linkType: "external";
        title: string | null;
        url: string | null;
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "blog-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "course-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "page-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "service-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      }> | null;
    } | {
      _ts: "ExternalLinkQuery";
      _key: string;
      linkType: "external";
      title: string | null;
      url: string | null;
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "blog-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "course-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "page-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      title: string | null;
      slug: string | null;
      _type: "service-slug";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "InternalLinkQuery";
      _key: string;
      linkType: "internal";
      description: null;
      icon: Icon | null;
      hideOnMobile: null;
      linkStyle: "button" | "default" | null;
    } | {
      _ts: "LinkGroupQuery";
      _key: string;
      linkType: "linkGroup";
      title: string | null;
      icon: null;
      hideOnMobile: null;
      items: Array<{
        _key: string;
        _ts: "DownloadLinkQuery";
        linkType: "download";
        title: string | null;
        url: string | null;
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "DropdownGroupQuery";
        linkType: "dropdownGroup";
        title: string | null;
        icon: null;
        hideOnMobile: null;
        links: Array<{
          _key: string;
          _ts: "DownloadLinkQuery";
          linkType: "download";
          title: string | null;
          url: string | null;
          description: null;
          icon: Icon | null;
          hideOnMobile: null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "ExternalLinkQuery";
          linkType: "external";
          title: string | null;
          url: string | null;
          description: null;
          icon: Icon | null;
          hideOnMobile: null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "blog-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "course-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "page-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          title: string | null;
          slug: string | null;
          _type: "service-slug";
          description: null;
          icon: Icon | null;
          hideOnMobile: null;
          linkStyle: "button" | "default" | null;
        } | {
          _key: string;
          _ts: "InternalLinkQuery";
          linkType: "internal";
          description: null;
          icon: Icon | null;
          hideOnMobile: null;
          linkStyle: "button" | "default" | null;
        }> | null;
      } | {
        _key: string;
        _ts: "ExternalLinkQuery";
        linkType: "external";
        title: string | null;
        url: string | null;
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "blog-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "course-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "page-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        title: string | null;
        slug: string | null;
        _type: "service-slug";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      } | {
        _key: string;
        _ts: "InternalLinkQuery";
        linkType: "internal";
        description: null;
        icon: Icon | null;
        hideOnMobile: null;
        linkStyle: "button" | "default" | null;
      }> | null;
    }> | null;
  } | null;
  footerSettings: {
    blocks: Array<{
      _type: "carousel-1-block";
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      size: "one" | "three" | "two" | null;
      orientation: null;
      indicators: "count" | "dots" | "none" | null;
      images: Array<{
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      }> | null;
    } | {
      _type: "carousel-2-block";
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      testimonial: Array<{
        _id: string;
        name: string | null;
        title: string | null;
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          alt: null;
        } | null;
      }> | null;
      body: null;
      rating: null;
    } | {
      _type: "contact-info-and-form-block";
      contactHeading: string | null;
      contactDescription: string | null;
      contactEmail: string | null;
      contactPhone: string | null;
      contactAddress: string | null;
      customContactForm: {
        _type: "custom-contact-form-block";
        formTitle: string | null;
        formDescription: string | null;
        submitButtonText: string | null;
        successMessage: string | null;
        formFields: Array<{
          fieldType: "checkbox" | "checkboxGroup" | "date" | "datetime" | "email" | "file" | "heading" | "radio" | "select" | "tel" | "text" | "textarea" | null;
          fieldName: string | null;
          fieldLabel: string | null;
          placeholder: string | null;
          isRequired: boolean | null;
          width: "full" | "half" | "quarter" | "remaining" | "third" | null;
          helpText: string | null;
          labelOnly: boolean | null;
          preChecked: boolean | null;
          options: Array<{
            label: string | null;
            value: string | null;
          }> | null;
          conditionalLogic: {
            enabled: boolean | null;
            controllerFieldName: string | null;
            action: "hide" | "show" | null;
            controllerValueChecked: "false" | "true" | null;
          } | null;
        }> | null;
      } | null;
    } | {
      _type: "course-slider-block";
      title: string | null;
      sectionId: string | null;
      courses: Array<{
        _id: string;
        title: string | null;
        slug: string | null;
        featuredImage: {
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          darkScore: number | NaN;
          asset: {
            _id: string;
            title: string | null;
            altText: string | null;
            description: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                aspectRatio: number | null;
                width: number | null;
                height: number | null;
              } | null;
              palette: {
                dominant: {
                  background: string | null;
                  foreground: string | null;
                  population: number | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
        excerpt: string | null;
      }> | null;
    } | {
      _type: "cover-map-block";
      center: Geopoint | null;
      zoom: number | null;
      height: {
        type?: "auto" | "px";
        height?: number;
      } | null;
      animateIntro: {
        enabled?: boolean;
        initialZoom?: number;
        initialPitch?: number;
        duration?: number;
      } | null;
      bearingRotation: {
        enabled?: boolean;
        speed?: number;
        introDelay?: number;
      } | null;
      radiusAnimation: {
        enabled?: boolean;
        duration?: number;
        spawnInterval?: number;
        radius?: number;
        opacity?: {
          startOpacity?: number;
          endOpacity?: number;
        };
        color?: string;
      } | null;
      color: null;
    } | {
      _type: "cta-1-block";
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      sectionWidth: "default" | "narrow" | null;
      stackAlign: "center" | "left" | null;
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      links: Array<{
        _key: string;
      } & Link> | null;
    } | {
      _type: "faqs-block";
      noPadding: boolean | null;
      faqs: Array<{
        _id: string;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }> | null;
      faqsByCategory: Array<{
        _id: string;
        title: string | null;
        faqs: Array<{
          _id: string;
          title: string | null;
          body: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
            listItem?: "bullet" | "number";
            markDefs?: Array<{
              href?: string;
              _type: "link";
              _key: string;
            }>;
            level?: number;
            _type: "block";
            _key: string;
          } | {
            asset: {
              _id: string;
              url: string | null;
              mimeType: string | null;
              metadata: {
                lqip: string | null;
                dimensions: {
                  width: number | null;
                  height: number | null;
                } | null;
              } | null;
            } | null;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
            _key: string;
          } | {
            videoId?: string;
            _type: "youtube";
            _key: string;
          }> | null;
        }>;
      }> | null;
    } | {
      _type: "form-newsletter-block";
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      stackAlign: "center" | "left" | null;
      consentText: string | null;
      buttonText: string | null;
      successMessage: string | null;
    } | {
      _type: "grid-card-block";
      title: string | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      link: Link | null;
    } | {
      _type: "grid-post-block";
      title: string | null;
      slug: Slug | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      categories: Array<{
        title: string | null;
      }> | null;
    } | {
      _type: "grid-post-block";
    } | {
      _type: "grid-row-block";
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      gridColumns: "grid-cols-2" | "grid-cols-3" | "grid-cols-4" | null;
      columns: Array<{
        _type: "grid-card-block";
        title: string | null;
        excerpt: string | null;
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          alt: string | null;
        } | null;
        link: Link | null;
      } | {
        _type: "grid-post-block";
        title: string | null;
        slug: Slug | null;
        excerpt: string | null;
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          alt: string | null;
        } | null;
        categories: Array<{
          title: string | null;
        }> | null;
      } | {
        _type: "grid-post-block";
      } | {
        _type: "pricing-card-block";
        title: string | null;
        tagLine: string | null;
        price: {
          value?: number;
          period?: string;
        } | null;
        list: Array<string> | null;
        excerpt: string | null;
        link: Link | null;
      }> | null;
    } | {
      _type: "heading-and-paragraph-centered-block";
      heading: string | null;
      paragraph: string | null;
    } | {
      _type: "hero-1-block";
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
      imagePosition: "left" | "right" | null;
      links: Array<{
        _key: string;
      } & Link> | null;
    } | {
      _type: "hero-2-block";
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      links: Array<{
        _key: string;
      } & Link> | null;
    } | {
      _type: "hero-3-block";
      titleOrange: string | null;
      titleWhite: string | null;
      subtitle: string | null;
      backgroundImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
      showOverlay: boolean | null;
      overlayColor: "0,0,0" | "255,255,255" | "dark" | "light" | null;
      topOverlayStrength: number | null;
      upperCenterOverlayStrength: number | null;
      lowerCenterOverlayStrength: number | null;
      bottomOverlayStrength: number | null;
    } | {
      _type: "hero-4-block";
      title: string | null;
      description: string | null;
      showOverlay: boolean | null;
      backgroundImage: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
      topOverlayStrength: number | null;
      upperCenterOverlayStrength: number | null;
      lowerCenterOverlayStrength: number | null;
      bottomOverlayStrength: number | null;
    } | {
      _type: "hero-5-block";
      image: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        darkScore: number | NaN;
        asset: {
          _id: string;
          title: string | null;
          altText: string | null;
          description: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              aspectRatio: number | null;
              width: number | null;
              height: number | null;
            } | null;
            palette: {
              dominant: {
                background: string | null;
                foreground: string | null;
                population: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | {
      _type: "logo-cloud-1-block";
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      title: string | null;
      images: Array<{
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      }> | null;
    } | {
      _type: "our-values-block";
      values: Array<{
        icon?: Icon;
        title?: string;
        description?: string;
        _type: "value";
        _key: string;
      }> | null;
    } | {
      _type: "pricing-card-block";
      title: string | null;
      tagLine: string | null;
      price: {
        value?: number;
        period?: string;
      } | null;
      list: Array<string> | null;
      excerpt: string | null;
      link: Link | null;
    } | {
      _type: "section-header-block";
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      sectionWidth: "default" | "narrow" | null;
      stackAlign: "center" | "left" | null;
      tagLine: string | null;
      title: string | null;
      description: string | null;
      link: null;
    } | {
      _type: "seperator-block";
      padding: SectionPadding | null;
    } | {
      _type: "service-grid-block";
      services: Array<{
        _id: string;
        title: string | null;
        slug: Slug | null;
        excerpt: string | null;
        featuredImage: {
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          darkScore: number | NaN;
          asset: {
            _id: string;
            title: string | null;
            altText: string | null;
            description: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                aspectRatio: number | null;
                width: number | null;
                height: number | null;
              } | null;
              palette: {
                dominant: {
                  background: string | null;
                  foreground: string | null;
                  population: number | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | {
        title: string | null;
        link: string | null;
        featuredImage: {
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          darkScore: number | NaN;
          asset: {
            _id: string;
            title: string | null;
            altText: string | null;
            description: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                aspectRatio: number | null;
                width: number | null;
                height: number | null;
              } | null;
              palette: {
                dominant: {
                  background: string | null;
                  foreground: string | null;
                  population: number | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
      }> | null;
    } | {
      _type: "split-cards-list-block";
      list: Array<{
        tagLine: string | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }> | null;
    } | {
      _type: "split-content-block";
      sticky: boolean | null;
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }> | null;
      link: Link | null;
    } | {
      _type: "split-image-block";
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        alt: string | null;
      } | null;
    } | {
      _type: "split-info-list-block";
      list: Array<{
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          alt: string | null;
        } | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
        tags: Array<string> | null;
      }> | null;
    } | {
      _type: "split-row-block";
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      noGap: boolean | null;
      splitColumns: Array<{
        _type: "split-cards-list-block";
        list: Array<{
          tagLine: string | null;
          title: string | null;
          body: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
            listItem?: "bullet" | "number";
            markDefs?: Array<{
              href?: string;
              _type: "link";
              _key: string;
            }>;
            level?: number;
            _type: "block";
            _key: string;
          } | {
            asset: {
              _id: string;
              url: string | null;
              mimeType: string | null;
              metadata: {
                lqip: string | null;
                dimensions: {
                  width: number | null;
                  height: number | null;
                } | null;
              } | null;
            } | null;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
            _key: string;
          } | {
            videoId?: string;
            _type: "youtube";
            _key: string;
          }> | null;
        }> | null;
      } | {
        _type: "split-content-block";
        sticky: boolean | null;
        padding: SectionPadding | null;
        colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
        tagLine: string | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
        link: Link | null;
      } | {
        _type: "split-image-block";
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          alt: string | null;
        } | null;
      } | {
        _type: "split-info-list-block";
        list: Array<{
          image: {
            asset: {
              _id: string;
              url: string | null;
              mimeType: string | null;
              metadata: {
                lqip: string | null;
                dimensions: {
                  width: number | null;
                  height: number | null;
                } | null;
              } | null;
            } | null;
            alt: string | null;
          } | null;
          title: string | null;
          body: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
            listItem?: "bullet" | "number";
            markDefs?: Array<{
              href?: string;
              _type: "link";
              _key: string;
            }>;
            level?: number;
            _type: "block";
            _key: string;
          } | {
            asset: {
              _id: string;
              url: string | null;
              mimeType: string | null;
              metadata: {
                lqip: string | null;
                dimensions: {
                  width: number | null;
                  height: number | null;
                } | null;
              } | null;
            } | null;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
            _key: string;
          } | {
            videoId?: string;
            _type: "youtube";
            _key: string;
          }> | null;
          tags: Array<string> | null;
        }> | null;
      }> | null;
    } | {
      _type: "timeline-row-block";
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      timelines: Array<{
        title: string | null;
        tagLine: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      }> | null;
    } | {
      _type: "two-column-block";
      firstColumn: {
        blockContent: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      } | null;
      secondColumn: {
        blockContent: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        } | {
          videoId?: string;
          _type: "youtube";
          _key: string;
        }> | null;
      } | null;
    } | {}> | null;
    ctaText: string | null;
    infoText: string | null;
    contactInfo: string | null;
    socialMediaLinks: Array<{
      platform: string | null;
      url: string | null;
    }> | null;
  } | null;
  metadataSettings: {
    metadata: {
      _ts: "MetadataQuery";
      title: string | null;
      desc: string | null;
      image: {
        id: string | null;
        altText: null;
      } | null;
      tags: null;
      noIndex: null;
    };
  } | null;
  route404Settings: {
    title: string | null;
    subtitle: string | null;
    buttonText: string | null;
    buttonLink: string | null;
    backgroundImage: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
    } | null;
    blocks: Array<{
      blocks: null;
    }> | null;
    meta_title: string | null;
    meta_description: string | null;
  } | null;
};

// Source: ./sanity/desk-organized-sanity-utilities/settings/site-settings/site-settings.query.ts
// Variable: siteSettingsFetchQuery
// Query: *[_type == "siteSettings"][0] {    privacyPolicyPage-> {      "slug": slug.current,      title    },  }
export type SiteSettingsFetchQueryResult = {
  privacyPolicyPage: {
    slug: string | null;
    title: string | null;
  } | null;
} | null;

// Source: ./sanity/desk-organized-sanity-utilities/testimonial/testimonial.document-queries.ts
// Variable: getAllReferencedTestimonialsQuery
// Query: testimonial[]->{    _id,    name,    title,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }    },      alt    },  }
export type GetAllReferencedTestimonialsQueryResult = never;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n*[_type == \"siteSettings\"][0].frontPage->{\n    \n  \nblocks[]{\n  // Hero Blocks\n  \n  _type == \"hero-1-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    imagePosition,\n    links,\n  }\n,\n  \n  _type == \"hero-2-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n  \n  _type == \"hero-3-block\" => {\n    _type,\n    titleOrange,\n    titleWhite,\n    subtitle,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    showOverlay,\n    \"overlayColor\": select(\n      \n      overlayColor == \"dark\" => \"0,0,0\",\n      overlayColor == \"light\" => \"255,255,255\",\n      overlayColor\n    ),\n  \n  \n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n  \n  _type == \"hero-4-block\" => {\n    _type,\n    title,\n    description,\n    showOverlay,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n\n  // Section/Header Blocks\n  \n  _type == \"section-header-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link,\n  }\n,\n  \n  _type == \"heading-and-paragraph-centered-block\" => {\n    _type,\n    heading,\n    paragraph,\n  }\n,\n\n  // Carousel Blocks\n  \n  _type == \"carousel-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    size,\n    orientation,\n    indicators,\n    images[]{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    }\n  }\n,\n  \n  _type == \"carousel-2-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    \ntestimonial[]->{\n    _id,\n    name,\n    title,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n    },\n      alt\n    },\n  }\n,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      rating,\n    }\n,\n\n  // Timeline\n  \n  _type == \"timeline-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n\n  // Call to Action\n  \n  _type == \"cta-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n\n  // Logo Cloud\n  \n  _type == \"logo-cloud-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    title,\n    images[]{\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n\n  // FAQs\n  \n  _type == \"faqs-block\" => {\n    _type,\n    noPadding,\n    \nfaqs[]->{\n  \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n}\n,\n    \n    faqsByCategory[]->{\n      _id,\n      title,\n      \"faqs\": *[_type == \"faq\" && references(^._id)] {\n        \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n        }\n      }\n\n  }\n,\n\n  // Newsletter\n  \n  _type == \"form-newsletter-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    stackAlign,\n    consentText,\n    buttonText,\n    successMessage,\n  }\n,\n\n  // Split Blocks\n  \n  _type == \"split-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    noGap,\n    splitColumns[]{\n      \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n      \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n      \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n      \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n  \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n  \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n  \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n  \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n\n  // Grid Blocks\n  \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n  \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n  \n  _type == \"grid-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    gridColumns,\n    columns[]{\n      \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n      \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n      \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n    },\n  }\n,\n\n  // Pricing\n  \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n\n  // Service\n  \n  _type == \"service-grid-block\" => {\n    _type,\n    services[]{\n      _type == \"manualService\" => {\n         title,\n         link,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      },\n      _type != \"manualService\" => @->{\n         _id,\n         title,\n         slug,\n         excerpt,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      }\n    },\n  }\n,\n\n  // Cover Map\n  \n  _type == \"cover-map-block\" => {\n    _type,\n    center,\n    zoom,\n    height,\n    animateIntro,\n    bearingRotation,\n    radiusAnimation,\n    color,\n\n  }\n,\n\n  // Contact Info\n  \n  _type == \"contact-info-and-form-block\" => {\n    _type,\n      contactHeading,\n      contactDescription,\n      contactEmail,\n      contactPhone,\n      contactAddress,\n      customContactForm{\n      \n   _type,\n    formTitle,\n    formDescription,\n    submitButtonText,\n    successMessage,\n    formFields[] {\n      fieldType,\n      fieldName,\n      fieldLabel,\n      placeholder,\n      isRequired,\n      width,\n      helpText,\n      labelOnly,\n      preChecked,\n      options[] {\n        label,\n        \"value\": select(value != null && value != \"\" => value, label)\n      },\n      conditionalLogic {\n        enabled,\n        controllerFieldName,\n        action,\n        controllerValueChecked\n      }\n  }\n\n    },\n    }\n,\n\n  // Our Values\n  \n  _type == \"our-values-block\" => {\n    _type,\n    values\n  }\n,\n\n  // Course Slider\n  \n  _type == \"course-slider-block\" => {\n    _type,\n    title,\n    sectionId,\n    courses[]->{\n      _id,\n      title,\n      \"slug\": slug.current,\n      featuredImage{\n        \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n      },\n      excerpt,\n    }\n  }\n,\n  \n  _type == \"hero-5-block\" => {\n    _type,\n    image{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n  }\n,\n\n  // Two Column\n  \n  _type == \"two-column-block\" => {\n    _type,\n    firstColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    },\n    secondColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    }\n  }\n,\n\n  // Seperator\n  \n  _type == \"seperator-block\" => {\n    _type,\n    padding,\n  }\n\n  // ADD VALUE 3 ABOVE\n}\n,\n    meta_title,\n    meta_description,\n    noindex,\n    navigationSettings {\n      navigationTextColor,\n    },\n    navigationTextColor,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n    }\n\n  }\n": GET_FRONT_PAGE_QUERYResult;
    "\n  *[_type == \"page-slug\" && slug.current == $slug][0]{\n    \n  \nblocks[]{\n  // Hero Blocks\n  \n  _type == \"hero-1-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    imagePosition,\n    links,\n  }\n,\n  \n  _type == \"hero-2-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n  \n  _type == \"hero-3-block\" => {\n    _type,\n    titleOrange,\n    titleWhite,\n    subtitle,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    showOverlay,\n    \"overlayColor\": select(\n      \n      overlayColor == \"dark\" => \"0,0,0\",\n      overlayColor == \"light\" => \"255,255,255\",\n      overlayColor\n    ),\n  \n  \n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n  \n  _type == \"hero-4-block\" => {\n    _type,\n    title,\n    description,\n    showOverlay,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n\n  // Section/Header Blocks\n  \n  _type == \"section-header-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link,\n  }\n,\n  \n  _type == \"heading-and-paragraph-centered-block\" => {\n    _type,\n    heading,\n    paragraph,\n  }\n,\n\n  // Carousel Blocks\n  \n  _type == \"carousel-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    size,\n    orientation,\n    indicators,\n    images[]{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    }\n  }\n,\n  \n  _type == \"carousel-2-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    \ntestimonial[]->{\n    _id,\n    name,\n    title,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n    },\n      alt\n    },\n  }\n,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      rating,\n    }\n,\n\n  // Timeline\n  \n  _type == \"timeline-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n\n  // Call to Action\n  \n  _type == \"cta-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n\n  // Logo Cloud\n  \n  _type == \"logo-cloud-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    title,\n    images[]{\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n\n  // FAQs\n  \n  _type == \"faqs-block\" => {\n    _type,\n    noPadding,\n    \nfaqs[]->{\n  \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n}\n,\n    \n    faqsByCategory[]->{\n      _id,\n      title,\n      \"faqs\": *[_type == \"faq\" && references(^._id)] {\n        \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n        }\n      }\n\n  }\n,\n\n  // Newsletter\n  \n  _type == \"form-newsletter-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    stackAlign,\n    consentText,\n    buttonText,\n    successMessage,\n  }\n,\n\n  // Split Blocks\n  \n  _type == \"split-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    noGap,\n    splitColumns[]{\n      \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n      \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n      \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n      \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n  \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n  \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n  \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n  \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n\n  // Grid Blocks\n  \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n  \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n  \n  _type == \"grid-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    gridColumns,\n    columns[]{\n      \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n      \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n      \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n    },\n  }\n,\n\n  // Pricing\n  \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n\n  // Service\n  \n  _type == \"service-grid-block\" => {\n    _type,\n    services[]{\n      _type == \"manualService\" => {\n         title,\n         link,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      },\n      _type != \"manualService\" => @->{\n         _id,\n         title,\n         slug,\n         excerpt,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      }\n    },\n  }\n,\n\n  // Cover Map\n  \n  _type == \"cover-map-block\" => {\n    _type,\n    center,\n    zoom,\n    height,\n    animateIntro,\n    bearingRotation,\n    radiusAnimation,\n    color,\n\n  }\n,\n\n  // Contact Info\n  \n  _type == \"contact-info-and-form-block\" => {\n    _type,\n      contactHeading,\n      contactDescription,\n      contactEmail,\n      contactPhone,\n      contactAddress,\n      customContactForm{\n      \n   _type,\n    formTitle,\n    formDescription,\n    submitButtonText,\n    successMessage,\n    formFields[] {\n      fieldType,\n      fieldName,\n      fieldLabel,\n      placeholder,\n      isRequired,\n      width,\n      helpText,\n      labelOnly,\n      preChecked,\n      options[] {\n        label,\n        \"value\": select(value != null && value != \"\" => value, label)\n      },\n      conditionalLogic {\n        enabled,\n        controllerFieldName,\n        action,\n        controllerValueChecked\n      }\n  }\n\n    },\n    }\n,\n\n  // Our Values\n  \n  _type == \"our-values-block\" => {\n    _type,\n    values\n  }\n,\n\n  // Course Slider\n  \n  _type == \"course-slider-block\" => {\n    _type,\n    title,\n    sectionId,\n    courses[]->{\n      _id,\n      title,\n      \"slug\": slug.current,\n      featuredImage{\n        \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n      },\n      excerpt,\n    }\n  }\n,\n  \n  _type == \"hero-5-block\" => {\n    _type,\n    image{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n  }\n,\n\n  // Two Column\n  \n  _type == \"two-column-block\" => {\n    _type,\n    firstColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    },\n    secondColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    }\n  }\n,\n\n  // Seperator\n  \n  _type == \"seperator-block\" => {\n    _type,\n    padding,\n  }\n\n  // ADD VALUE 3 ABOVE\n}\n,\n    meta_title,\n    meta_description,\n    noindex,\n    navigationSettings {\n      navigationTextColor,\n    },\n    navigationTextColor,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n    }\n\n  }\n": GET_PAGE_BY_DEFINED_SLUG_QUERYResult;
    "*[_type == \"page-slug\" && defined(slug)]{slug}": GET_ALL_PAGES_QUERYResult;
    "*[_type == \"blog-slug\" && defined(slug)] | order(_createdAt desc){\n    title,\n    slug,\n    excerpt,\n}": GET_BLOG_PAGES_BY_DEFINED_SLUG_QUERYResult;
    "*[_type == \"blog-slug\" && defined(slug)]{slug}": GET_ALL_BLOG_PAGES_QUERYResult;
    "*[_type == \"blog-slug\" && slug.current == $slug][0]{\n  title,\n  slug,\n  body[]{\n    \n    ...,\n    _type == \"image\" => {\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      }\n    }\n\n  },\n  _createdAt,\n  _updatedAt,\n}": GET_BLOG_PAGE_BY_ROUTE_QUERYResult;
    "\n  *[_type == \"course-slug\" && defined(slug)] | order(_createdAt desc){\n    title,\n    slug,\n    excerpt,\n  }\n": GET_COURSE_PAGE_BY_DEFINED_SLUG_QUERYResult;
    "\n  *[_type == \"course-slug\" && defined(slug)]{\n    slug\n  }\n": GET_ALL_COURSE_PAGES_QUERYResult;
    "\n  *[_type == \"course-slug\" && slug.current == $slug][0]{\n    title,\n    slug,\n    featuredImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    _createdAt,\n    _updatedAt,\n  }\n": GET_COURSE_PAGE_BY_ROUTE_QUERYResult;
    "*[_type == \"service-slug\" && defined(slug)] | order(_createdAt desc){\n    title,\n    slug,\n    excerpt,\n    featuredImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n  }\n": GET_SERVICE_PAGE_BY_DEFINED_SLUG_QUERYResult;
    "\n  *[_type == \"service-slug\" && defined(slug)]{\n    slug\n  }\n": GET_ALL_SERVICE_PAGES_QUERYResult;
    "\n  *[_type == \"service-slug\" && slug.current == $slug][0]{\n    title,\n    customTitle,\n    slug,\n    layout,\n    \"headerColor\": \"dark\",\n    excerpt,\n    _createdAt,\n    customContactForm{\n      \n   _type,\n    formTitle,\n    formDescription,\n    submitButtonText,\n    successMessage,\n    formFields[] {\n      fieldType,\n      fieldName,\n      fieldLabel,\n      placeholder,\n      isRequired,\n      width,\n      helpText,\n      labelOnly,\n      preChecked,\n      options[] {\n        label,\n        \"value\": select(value != null && value != \"\" => value, label)\n      },\n      conditionalLogic {\n        enabled,\n        controllerFieldName,\n        action,\n        controllerValueChecked\n      }\n  }\n\n    },\n    body[]{\n      \n    ...,\n    _type == \"image\" => {\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      }\n    }\n\n    },\n    _updatedAt,\n    faqs{ \n      noPadding,\n      \nfaqs[]->{\n  \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n}\n,\n      \n    faqsByCategory[]->{\n      _id,\n      title,\n      \"faqs\": *[_type == \"faq\" && references(^._id)] {\n        \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n        }\n      }\n\n    },\n    featuredImage{\n      _type, \n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n\n  }\n": GET_SERVICE_PAGE_BY_ROUTE_QUERYResult;
    "\n    *[_type == \"service-slug\"] | order(_updatedAt desc) {\n      \"url\": $baseUrl + '/service/' + slug.current,\n      \"slug\": slug.current,\n      \"lastModified\": _updatedAt,\n      \"changeFrequency\": 'weekly',\n      \"priority\": 0.7\n    }\n  ": ServicesQueryResult;
    "\n  author->{\n    name,\n    image {\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    }\n  }\n": GetAuthorReferenceQueryResult;
    "\ncategories[]->{\n        title,\n      }\n": GetAllCategoriesQueryResult;
    "\n    faqsByCategory[]->{\n      _id,\n      title,\n      \"faqs\": *[_type == \"faq\" && references(^._id)] {\n        \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n        }\n      }\n": GetAllFaqCategoriesQueryResult;
    "\nfaqs[]->{\n  \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n}\n": GetAllReferencedFaqsQueryResult;
    "\n  *[_type == \"footerSettings\"][0] {\n  \n    \nblocks[]{\n  // Hero Blocks\n  \n  _type == \"hero-1-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    imagePosition,\n    links,\n  }\n,\n  \n  _type == \"hero-2-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n  \n  _type == \"hero-3-block\" => {\n    _type,\n    titleOrange,\n    titleWhite,\n    subtitle,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    showOverlay,\n    \"overlayColor\": select(\n      \n      overlayColor == \"dark\" => \"0,0,0\",\n      overlayColor == \"light\" => \"255,255,255\",\n      overlayColor\n    ),\n  \n  \n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n  \n  _type == \"hero-4-block\" => {\n    _type,\n    title,\n    description,\n    showOverlay,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n\n  // Section/Header Blocks\n  \n  _type == \"section-header-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link,\n  }\n,\n  \n  _type == \"heading-and-paragraph-centered-block\" => {\n    _type,\n    heading,\n    paragraph,\n  }\n,\n\n  // Carousel Blocks\n  \n  _type == \"carousel-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    size,\n    orientation,\n    indicators,\n    images[]{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    }\n  }\n,\n  \n  _type == \"carousel-2-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    \ntestimonial[]->{\n    _id,\n    name,\n    title,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n    },\n      alt\n    },\n  }\n,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      rating,\n    }\n,\n\n  // Timeline\n  \n  _type == \"timeline-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n\n  // Call to Action\n  \n  _type == \"cta-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n\n  // Logo Cloud\n  \n  _type == \"logo-cloud-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    title,\n    images[]{\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n\n  // FAQs\n  \n  _type == \"faqs-block\" => {\n    _type,\n    noPadding,\n    \nfaqs[]->{\n  \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n}\n,\n    \n    faqsByCategory[]->{\n      _id,\n      title,\n      \"faqs\": *[_type == \"faq\" && references(^._id)] {\n        \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n        }\n      }\n\n  }\n,\n\n  // Newsletter\n  \n  _type == \"form-newsletter-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    stackAlign,\n    consentText,\n    buttonText,\n    successMessage,\n  }\n,\n\n  // Split Blocks\n  \n  _type == \"split-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    noGap,\n    splitColumns[]{\n      \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n      \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n      \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n      \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n  \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n  \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n  \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n  \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n\n  // Grid Blocks\n  \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n  \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n  \n  _type == \"grid-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    gridColumns,\n    columns[]{\n      \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n      \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n      \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n    },\n  }\n,\n\n  // Pricing\n  \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n\n  // Service\n  \n  _type == \"service-grid-block\" => {\n    _type,\n    services[]{\n      _type == \"manualService\" => {\n         title,\n         link,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      },\n      _type != \"manualService\" => @->{\n         _id,\n         title,\n         slug,\n         excerpt,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      }\n    },\n  }\n,\n\n  // Cover Map\n  \n  _type == \"cover-map-block\" => {\n    _type,\n    center,\n    zoom,\n    height,\n    animateIntro,\n    bearingRotation,\n    radiusAnimation,\n    color,\n\n  }\n,\n\n  // Contact Info\n  \n  _type == \"contact-info-and-form-block\" => {\n    _type,\n      contactHeading,\n      contactDescription,\n      contactEmail,\n      contactPhone,\n      contactAddress,\n      customContactForm{\n      \n   _type,\n    formTitle,\n    formDescription,\n    submitButtonText,\n    successMessage,\n    formFields[] {\n      fieldType,\n      fieldName,\n      fieldLabel,\n      placeholder,\n      isRequired,\n      width,\n      helpText,\n      labelOnly,\n      preChecked,\n      options[] {\n        label,\n        \"value\": select(value != null && value != \"\" => value, label)\n      },\n      conditionalLogic {\n        enabled,\n        controllerFieldName,\n        action,\n        controllerValueChecked\n      }\n  }\n\n    },\n    }\n,\n\n  // Our Values\n  \n  _type == \"our-values-block\" => {\n    _type,\n    values\n  }\n,\n\n  // Course Slider\n  \n  _type == \"course-slider-block\" => {\n    _type,\n    title,\n    sectionId,\n    courses[]->{\n      _id,\n      title,\n      \"slug\": slug.current,\n      featuredImage{\n        \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n      },\n      excerpt,\n    }\n  }\n,\n  \n  _type == \"hero-5-block\" => {\n    _type,\n    image{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n  }\n,\n\n  // Two Column\n  \n  _type == \"two-column-block\" => {\n    _type,\n    firstColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    },\n    secondColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    }\n  }\n,\n\n  // Seperator\n  \n  _type == \"seperator-block\" => {\n    _type,\n    padding,\n  }\n\n  // ADD VALUE 3 ABOVE\n}\n,\n    ctaText,\n    infoText,\n    contactInfo,\n    socialMediaLinks[] {\n      platform,\n      url\n  }\n\n  }\n": FooterSettingsFetchQueryResult;
    "\n  *[_type == \"headerSettings\"][0] {\n  \n    enableTopBar,\n    topBar {\n      justifyContent,\n      items[] {\n        \n  \"_ts\": \"LinksQuery\",\n  _key,\n  _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"dropdownGroup\" => {\n  \"_ts\": \"DropdownGroupQuery\",\n  \"linkType\": \"dropdownGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  links[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n}\n  }\n},\n  _type == \"linkGroup\" => {\n  \"_ts\": \"LinkGroupQuery\",\n  \"linkType\": \"linkGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  items[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"dropdownGroup\" => {\n  \"_ts\": \"DropdownGroupQuery\",\n  \"linkType\": \"dropdownGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  links[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n}\n  }\n}\n  }\n}\n,\n        icon,\n        hideOnMobile,\n        linkStyle\n      }\n    },\n    logoOptions,\n    \"logo\": select(\n        logoOptions.logoType == \"svgloop\" => logoOptions.svgloopLogo,\n        logoOptions.logoType == \"lightAndDark\" => logoOptions.lightAndDarkLogo {\n            lightLogo,\n            darkLogo\n        },\n        logoOptions.logoType == \"default\" => logoOptions.defaultLogo\n    ),\n    navigationConfig {\n      justifyContent\n    },\n    navigationItems[] {\n        \n  \"_ts\": \"LinksQuery\",\n  _key,\n  _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"dropdownGroup\" => {\n  \"_ts\": \"DropdownGroupQuery\",\n  \"linkType\": \"dropdownGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  links[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n}\n  }\n},\n  _type == \"linkGroup\" => {\n  \"_ts\": \"LinkGroupQuery\",\n  \"linkType\": \"linkGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  items[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"dropdownGroup\" => {\n  \"_ts\": \"DropdownGroupQuery\",\n  \"linkType\": \"dropdownGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  links[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n}\n  }\n}\n  }\n}\n\n    }\n\n  }\n": HeaderSettingsFetchQueryResult;
    "\n  *[_type == \"metadataSettings\"][0] {\n    \n  \"metadata\": {\n    \"_ts\": \"MetadataQuery\",\n    \"title\": coalesce(metadata.title, title, name),\n    \"desc\": coalesce(metadata.desc, excerpt),\n    \"image\": select(\n      defined(metadata.image.asset._ref) => metadata.image {\n        \n  \"id\": asset._ref,\n  altText\n\n      },\n      defined(image.asset._ref) => image {\n        \n  \"id\": asset._ref,\n  altText\n\n      },\n      defined(coverImage.asset._ref) => coverImage {\n        \n  \"id\": asset._ref,\n  altText\n\n      },\n      defined(hero.image.asset._ref) => hero.image {\n        \n  \"id\": asset._ref,\n  altText\n\n      }\n    ),\n    \"tags\": metadata.tags,\n    \"noIndex\": metadata.noIndex\n  }\n\n  }\n": MetadataSettingsFetchQueryResult;
    "\n  *[_type == \"route404Settings\"][0] {\n  \n    title,\n    subtitle,\n    buttonText,\n    buttonLink,\n    backgroundImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      }\n    },\n    blocks[] {\n      \nblocks[]{\n  // Hero Blocks\n  \n  _type == \"hero-1-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    imagePosition,\n    links,\n  }\n,\n  \n  _type == \"hero-2-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n  \n  _type == \"hero-3-block\" => {\n    _type,\n    titleOrange,\n    titleWhite,\n    subtitle,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    showOverlay,\n    \"overlayColor\": select(\n      \n      overlayColor == \"dark\" => \"0,0,0\",\n      overlayColor == \"light\" => \"255,255,255\",\n      overlayColor\n    ),\n  \n  \n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n  \n  _type == \"hero-4-block\" => {\n    _type,\n    title,\n    description,\n    showOverlay,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n\n  // Section/Header Blocks\n  \n  _type == \"section-header-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link,\n  }\n,\n  \n  _type == \"heading-and-paragraph-centered-block\" => {\n    _type,\n    heading,\n    paragraph,\n  }\n,\n\n  // Carousel Blocks\n  \n  _type == \"carousel-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    size,\n    orientation,\n    indicators,\n    images[]{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    }\n  }\n,\n  \n  _type == \"carousel-2-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    \ntestimonial[]->{\n    _id,\n    name,\n    title,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n    },\n      alt\n    },\n  }\n,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      rating,\n    }\n,\n\n  // Timeline\n  \n  _type == \"timeline-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n\n  // Call to Action\n  \n  _type == \"cta-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n\n  // Logo Cloud\n  \n  _type == \"logo-cloud-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    title,\n    images[]{\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n\n  // FAQs\n  \n  _type == \"faqs-block\" => {\n    _type,\n    noPadding,\n    \nfaqs[]->{\n  \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n}\n,\n    \n    faqsByCategory[]->{\n      _id,\n      title,\n      \"faqs\": *[_type == \"faq\" && references(^._id)] {\n        \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n        }\n      }\n\n  }\n,\n\n  // Newsletter\n  \n  _type == \"form-newsletter-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    stackAlign,\n    consentText,\n    buttonText,\n    successMessage,\n  }\n,\n\n  // Split Blocks\n  \n  _type == \"split-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    noGap,\n    splitColumns[]{\n      \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n      \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n      \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n      \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n  \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n  \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n  \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n  \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n\n  // Grid Blocks\n  \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n  \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n  \n  _type == \"grid-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    gridColumns,\n    columns[]{\n      \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n      \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n      \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n    },\n  }\n,\n\n  // Pricing\n  \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n\n  // Service\n  \n  _type == \"service-grid-block\" => {\n    _type,\n    services[]{\n      _type == \"manualService\" => {\n         title,\n         link,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      },\n      _type != \"manualService\" => @->{\n         _id,\n         title,\n         slug,\n         excerpt,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      }\n    },\n  }\n,\n\n  // Cover Map\n  \n  _type == \"cover-map-block\" => {\n    _type,\n    center,\n    zoom,\n    height,\n    animateIntro,\n    bearingRotation,\n    radiusAnimation,\n    color,\n\n  }\n,\n\n  // Contact Info\n  \n  _type == \"contact-info-and-form-block\" => {\n    _type,\n      contactHeading,\n      contactDescription,\n      contactEmail,\n      contactPhone,\n      contactAddress,\n      customContactForm{\n      \n   _type,\n    formTitle,\n    formDescription,\n    submitButtonText,\n    successMessage,\n    formFields[] {\n      fieldType,\n      fieldName,\n      fieldLabel,\n      placeholder,\n      isRequired,\n      width,\n      helpText,\n      labelOnly,\n      preChecked,\n      options[] {\n        label,\n        \"value\": select(value != null && value != \"\" => value, label)\n      },\n      conditionalLogic {\n        enabled,\n        controllerFieldName,\n        action,\n        controllerValueChecked\n      }\n  }\n\n    },\n    }\n,\n\n  // Our Values\n  \n  _type == \"our-values-block\" => {\n    _type,\n    values\n  }\n,\n\n  // Course Slider\n  \n  _type == \"course-slider-block\" => {\n    _type,\n    title,\n    sectionId,\n    courses[]->{\n      _id,\n      title,\n      \"slug\": slug.current,\n      featuredImage{\n        \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n      },\n      excerpt,\n    }\n  }\n,\n  \n  _type == \"hero-5-block\" => {\n    _type,\n    image{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n  }\n,\n\n  // Two Column\n  \n  _type == \"two-column-block\" => {\n    _type,\n    firstColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    },\n    secondColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    }\n  }\n,\n\n  // Seperator\n  \n  _type == \"seperator-block\" => {\n    _type,\n    padding,\n  }\n\n  // ADD VALUE 3 ABOVE\n}\n\n    },\n    meta_title,\n    meta_description\n\n  }\n": Route404SettingsFetchQueryResult;
    "{\n  \"siteSettings\": \n  *[_type == \"siteSettings\"][0] {\n    privacyPolicyPage-> {\n      \"slug\": slug.current,\n      title\n    },\n  }\n,\n  \"headerSettings\": \n  *[_type == \"headerSettings\"][0] {\n  \n    enableTopBar,\n    topBar {\n      justifyContent,\n      items[] {\n        \n  \"_ts\": \"LinksQuery\",\n  _key,\n  _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"dropdownGroup\" => {\n  \"_ts\": \"DropdownGroupQuery\",\n  \"linkType\": \"dropdownGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  links[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n}\n  }\n},\n  _type == \"linkGroup\" => {\n  \"_ts\": \"LinkGroupQuery\",\n  \"linkType\": \"linkGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  items[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"dropdownGroup\" => {\n  \"_ts\": \"DropdownGroupQuery\",\n  \"linkType\": \"dropdownGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  links[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n}\n  }\n}\n  }\n}\n,\n        icon,\n        hideOnMobile,\n        linkStyle\n      }\n    },\n    logoOptions,\n    \"logo\": select(\n        logoOptions.logoType == \"svgloop\" => logoOptions.svgloopLogo,\n        logoOptions.logoType == \"lightAndDark\" => logoOptions.lightAndDarkLogo {\n            lightLogo,\n            darkLogo\n        },\n        logoOptions.logoType == \"default\" => logoOptions.defaultLogo\n    ),\n    navigationConfig {\n      justifyContent\n    },\n    navigationItems[] {\n        \n  \"_ts\": \"LinksQuery\",\n  _key,\n  _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n  _type == \"dropdownGroup\" => {\n  \"_ts\": \"DropdownGroupQuery\",\n  \"linkType\": \"dropdownGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  links[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n}\n  }\n},\n  _type == \"linkGroup\" => {\n  \"_ts\": \"LinkGroupQuery\",\n  \"linkType\": \"linkGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  items[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"dropdownGroup\" => {\n  \"_ts\": \"DropdownGroupQuery\",\n  \"linkType\": \"dropdownGroup\",\n  title,\n  icon,\n  hideOnMobile,\n  links[] {\n    _key,\n    _type == \"internalLinkObject\" => {\n  \"_ts\": \"InternalLinkQuery\",\n  \"linkType\": \"internal\",\n  ...(internalLink-> {\n    \"title\": coalesce(\n      ^.customTitle,\n      title,\n      name\n    ),\n    \"slug\": slug.current,\n    _type\n  }),\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"link\" => {\n  \"_ts\": \"ExternalLinkQuery\",\n  \"linkType\": \"external\",\n  \"title\": coalesce(\n    customTitle,\n    href\n  ),\n  \"url\": href,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n},\n    _type == \"downloadLinkObject\" => {\n  \"_ts\": \"DownloadLinkQuery\",\n  \"linkType\": \"download\",\n  \"title\": coalesce(\n      customTitle,\n      file.asset->originalFilename\n    ),\n  \"url\": file.asset->url,\n  description,\n  icon,\n  hideOnMobile,\n  linkStyle\n}\n  }\n}\n  }\n}\n\n    }\n\n  }\n,\n  \"footerSettings\": \n  *[_type == \"footerSettings\"][0] {\n  \n    \nblocks[]{\n  // Hero Blocks\n  \n  _type == \"hero-1-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    imagePosition,\n    links,\n  }\n,\n  \n  _type == \"hero-2-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n  \n  _type == \"hero-3-block\" => {\n    _type,\n    titleOrange,\n    titleWhite,\n    subtitle,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    showOverlay,\n    \"overlayColor\": select(\n      \n      overlayColor == \"dark\" => \"0,0,0\",\n      overlayColor == \"light\" => \"255,255,255\",\n      overlayColor\n    ),\n  \n  \n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n  \n  _type == \"hero-4-block\" => {\n    _type,\n    title,\n    description,\n    showOverlay,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n\n  // Section/Header Blocks\n  \n  _type == \"section-header-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link,\n  }\n,\n  \n  _type == \"heading-and-paragraph-centered-block\" => {\n    _type,\n    heading,\n    paragraph,\n  }\n,\n\n  // Carousel Blocks\n  \n  _type == \"carousel-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    size,\n    orientation,\n    indicators,\n    images[]{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    }\n  }\n,\n  \n  _type == \"carousel-2-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    \ntestimonial[]->{\n    _id,\n    name,\n    title,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n    },\n      alt\n    },\n  }\n,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      rating,\n    }\n,\n\n  // Timeline\n  \n  _type == \"timeline-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n\n  // Call to Action\n  \n  _type == \"cta-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n\n  // Logo Cloud\n  \n  _type == \"logo-cloud-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    title,\n    images[]{\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n\n  // FAQs\n  \n  _type == \"faqs-block\" => {\n    _type,\n    noPadding,\n    \nfaqs[]->{\n  \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n}\n,\n    \n    faqsByCategory[]->{\n      _id,\n      title,\n      \"faqs\": *[_type == \"faq\" && references(^._id)] {\n        \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n        }\n      }\n\n  }\n,\n\n  // Newsletter\n  \n  _type == \"form-newsletter-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    stackAlign,\n    consentText,\n    buttonText,\n    successMessage,\n  }\n,\n\n  // Split Blocks\n  \n  _type == \"split-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    noGap,\n    splitColumns[]{\n      \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n      \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n      \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n      \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n  \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n  \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n  \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n  \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n\n  // Grid Blocks\n  \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n  \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n  \n  _type == \"grid-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    gridColumns,\n    columns[]{\n      \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n      \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n      \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n    },\n  }\n,\n\n  // Pricing\n  \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n\n  // Service\n  \n  _type == \"service-grid-block\" => {\n    _type,\n    services[]{\n      _type == \"manualService\" => {\n         title,\n         link,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      },\n      _type != \"manualService\" => @->{\n         _id,\n         title,\n         slug,\n         excerpt,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      }\n    },\n  }\n,\n\n  // Cover Map\n  \n  _type == \"cover-map-block\" => {\n    _type,\n    center,\n    zoom,\n    height,\n    animateIntro,\n    bearingRotation,\n    radiusAnimation,\n    color,\n\n  }\n,\n\n  // Contact Info\n  \n  _type == \"contact-info-and-form-block\" => {\n    _type,\n      contactHeading,\n      contactDescription,\n      contactEmail,\n      contactPhone,\n      contactAddress,\n      customContactForm{\n      \n   _type,\n    formTitle,\n    formDescription,\n    submitButtonText,\n    successMessage,\n    formFields[] {\n      fieldType,\n      fieldName,\n      fieldLabel,\n      placeholder,\n      isRequired,\n      width,\n      helpText,\n      labelOnly,\n      preChecked,\n      options[] {\n        label,\n        \"value\": select(value != null && value != \"\" => value, label)\n      },\n      conditionalLogic {\n        enabled,\n        controllerFieldName,\n        action,\n        controllerValueChecked\n      }\n  }\n\n    },\n    }\n,\n\n  // Our Values\n  \n  _type == \"our-values-block\" => {\n    _type,\n    values\n  }\n,\n\n  // Course Slider\n  \n  _type == \"course-slider-block\" => {\n    _type,\n    title,\n    sectionId,\n    courses[]->{\n      _id,\n      title,\n      \"slug\": slug.current,\n      featuredImage{\n        \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n      },\n      excerpt,\n    }\n  }\n,\n  \n  _type == \"hero-5-block\" => {\n    _type,\n    image{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n  }\n,\n\n  // Two Column\n  \n  _type == \"two-column-block\" => {\n    _type,\n    firstColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    },\n    secondColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    }\n  }\n,\n\n  // Seperator\n  \n  _type == \"seperator-block\" => {\n    _type,\n    padding,\n  }\n\n  // ADD VALUE 3 ABOVE\n}\n,\n    ctaText,\n    infoText,\n    contactInfo,\n    socialMediaLinks[] {\n      platform,\n      url\n  }\n\n  }\n,\n  \"metadataSettings\": \n  *[_type == \"metadataSettings\"][0] {\n    \n  \"metadata\": {\n    \"_ts\": \"MetadataQuery\",\n    \"title\": coalesce(metadata.title, title, name),\n    \"desc\": coalesce(metadata.desc, excerpt),\n    \"image\": select(\n      defined(metadata.image.asset._ref) => metadata.image {\n        \n  \"id\": asset._ref,\n  altText\n\n      },\n      defined(image.asset._ref) => image {\n        \n  \"id\": asset._ref,\n  altText\n\n      },\n      defined(coverImage.asset._ref) => coverImage {\n        \n  \"id\": asset._ref,\n  altText\n\n      },\n      defined(hero.image.asset._ref) => hero.image {\n        \n  \"id\": asset._ref,\n  altText\n\n      }\n    ),\n    \"tags\": metadata.tags,\n    \"noIndex\": metadata.noIndex\n  }\n\n  }\n,\n  \"route404Settings\": \n  *[_type == \"route404Settings\"][0] {\n  \n    title,\n    subtitle,\n    buttonText,\n    buttonLink,\n    backgroundImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      }\n    },\n    blocks[] {\n      \nblocks[]{\n  // Hero Blocks\n  \n  _type == \"hero-1-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    imagePosition,\n    links,\n  }\n,\n  \n  _type == \"hero-2-block\" => {\n    _type,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n  \n  _type == \"hero-3-block\" => {\n    _type,\n    titleOrange,\n    titleWhite,\n    subtitle,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    showOverlay,\n    \"overlayColor\": select(\n      \n      overlayColor == \"dark\" => \"0,0,0\",\n      overlayColor == \"light\" => \"255,255,255\",\n      overlayColor\n    ),\n  \n  \n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n  \n  _type == \"hero-4-block\" => {\n    _type,\n    title,\n    description,\n    showOverlay,\n    backgroundImage{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n    topOverlayStrength,\n    upperCenterOverlayStrength,\n    lowerCenterOverlayStrength,\n    bottomOverlayStrength,\n  }\n,\n\n  // Section/Header Blocks\n  \n  _type == \"section-header-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link,\n  }\n,\n  \n  _type == \"heading-and-paragraph-centered-block\" => {\n    _type,\n    heading,\n    paragraph,\n  }\n,\n\n  // Carousel Blocks\n  \n  _type == \"carousel-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    size,\n    orientation,\n    indicators,\n    images[]{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    }\n  }\n,\n  \n  _type == \"carousel-2-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    \ntestimonial[]->{\n    _id,\n    name,\n    title,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n    },\n      alt\n    },\n  }\n,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      rating,\n    }\n,\n\n  // Timeline\n  \n  _type == \"timeline-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n\n  // Call to Action\n  \n  _type == \"cta-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n\n  // Logo Cloud\n  \n  _type == \"logo-cloud-1-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    title,\n    images[]{\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n\n  // FAQs\n  \n  _type == \"faqs-block\" => {\n    _type,\n    noPadding,\n    \nfaqs[]->{\n  \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n}\n,\n    \n    faqsByCategory[]->{\n      _id,\n      title,\n      \"faqs\": *[_type == \"faq\" && references(^._id)] {\n        \n    _id,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    }\n\n        }\n      }\n\n  }\n,\n\n  // Newsletter\n  \n  _type == \"form-newsletter-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    stackAlign,\n    consentText,\n    buttonText,\n    successMessage,\n  }\n,\n\n  // Split Blocks\n  \n  _type == \"split-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    noGap,\n    splitColumns[]{\n      \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n      \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n      \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n      \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n  \n  _type == \"split-content-block\" => {\n    _type,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n  \n  _type == \"split-cards-list-block\" => {\n    _type,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n  \n  _type == \"split-image-block\" => {\n    _type,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n  \n  _type == \"split-info-list-block\" => {\n    _type,\n    list[]{\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n\n  // Grid Blocks\n  \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n  \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n  \n  _type == \"grid-row-block\" => {\n    _type,\n    padding,\n    colorVariant,\n    gridColumns,\n    columns[]{\n      \n  _type == \"grid-card-block\" => {\n    _type,\n    title,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    link,\n  }\n,\n      \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n      \n  _type == \"grid-post-block\" => {\n    _type,\n    ...post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      \ncategories[]->{\n        title,\n      }\n,\n    },\n  }\n,\n    },\n  }\n,\n\n  // Pricing\n  \n  _type == \"pricing-card-block\" => {\n    _type,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n\n  // Service\n  \n  _type == \"service-grid-block\" => {\n    _type,\n    services[]{\n      _type == \"manualService\" => {\n         title,\n         link,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      },\n      _type != \"manualService\" => @->{\n         _id,\n         title,\n         slug,\n         excerpt,\n         featuredImage{\n           \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n         }\n      }\n    },\n  }\n,\n\n  // Cover Map\n  \n  _type == \"cover-map-block\" => {\n    _type,\n    center,\n    zoom,\n    height,\n    animateIntro,\n    bearingRotation,\n    radiusAnimation,\n    color,\n\n  }\n,\n\n  // Contact Info\n  \n  _type == \"contact-info-and-form-block\" => {\n    _type,\n      contactHeading,\n      contactDescription,\n      contactEmail,\n      contactPhone,\n      contactAddress,\n      customContactForm{\n      \n   _type,\n    formTitle,\n    formDescription,\n    submitButtonText,\n    successMessage,\n    formFields[] {\n      fieldType,\n      fieldName,\n      fieldLabel,\n      placeholder,\n      isRequired,\n      width,\n      helpText,\n      labelOnly,\n      preChecked,\n      options[] {\n        label,\n        \"value\": select(value != null && value != \"\" => value, label)\n      },\n      conditionalLogic {\n        enabled,\n        controllerFieldName,\n        action,\n        controllerValueChecked\n      }\n  }\n\n    },\n    }\n,\n\n  // Our Values\n  \n  _type == \"our-values-block\" => {\n    _type,\n    values\n  }\n,\n\n  // Course Slider\n  \n  _type == \"course-slider-block\" => {\n    _type,\n    title,\n    sectionId,\n    courses[]->{\n      _id,\n      title,\n      \"slug\": slug.current,\n      featuredImage{\n        \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n      },\n      excerpt,\n    }\n  }\n,\n  \n  _type == \"hero-5-block\" => {\n    _type,\n    image{\n      \n  \n  crop,\n  hotspot,\n  \"darkScore\": (\n    (coalesce(asset->metadata.palette.darkVibrant.population, 0)\n     + coalesce(asset->metadata.palette.darkMuted.population, 0))\n    /\n    (\n      coalesce(asset->metadata.palette.darkVibrant.population, 0)\n      + coalesce(asset->metadata.palette.darkMuted.population, 0)\n      + coalesce(asset->metadata.palette.dominant.population, 0)\n      + coalesce(asset->metadata.palette.lightVibrant.population, 0)\n      + coalesce(asset->metadata.palette.lightMuted.population, 0)\n      + coalesce(asset->metadata.palette.muted.population, 0)\n    )\n  ),\n  asset->{\n    _id,\n    title,\n    altText,\n    description,\n    metadata {\n      lqip,\n      dimensions {\n        aspectRatio,\n        width,\n        height\n      },\n      palette {\n        dominant {\n          background,\n          foreground,\n          population\n        }\n      }\n    }\n  }\n\n\n    },\n  }\n,\n\n  // Two Column\n  \n  _type == \"two-column-block\" => {\n    _type,\n    firstColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    },\n    secondColumn {\n      blockContent[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    }\n  }\n,\n\n  // Seperator\n  \n  _type == \"seperator-block\" => {\n    _type,\n    padding,\n  }\n\n  // ADD VALUE 3 ABOVE\n}\n\n    },\n    meta_title,\n    meta_description\n\n  }\n,\n  // ADD VALUE 3 ABOVE\n}": SettingsQueryResult;
    "\n  *[_type == \"siteSettings\"][0] {\n    privacyPolicyPage-> {\n      \"slug\": slug.current,\n      title\n    },\n  }\n": SiteSettingsFetchQueryResult;
    "\ntestimonial[]->{\n    _id,\n    name,\n    title,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n    },\n      alt\n    },\n  }\n": GetAllReferencedTestimonialsQueryResult;
  }
}
